// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.0--rc1
// source: telemetry/v1.proto

package v1_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Hash_HashAlgo int32

const (
	Hash_HASH_ALGO_UNKNOWN Hash_HashAlgo = 0
	Hash_HASH_ALGO_SHA256  Hash_HashAlgo = 1
)

// Enum value maps for Hash_HashAlgo.
var (
	Hash_HashAlgo_name = map[int32]string{
		0: "HASH_ALGO_UNKNOWN",
		1: "HASH_ALGO_SHA256",
	}
	Hash_HashAlgo_value = map[string]int32{
		"HASH_ALGO_UNKNOWN": 0,
		"HASH_ALGO_SHA256":  1,
	}
)

func (x Hash_HashAlgo) Enum() *Hash_HashAlgo {
	p := new(Hash_HashAlgo)
	*p = x
	return p
}

func (x Hash_HashAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hash_HashAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[0].Descriptor()
}

func (Hash_HashAlgo) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[0]
}

func (x Hash_HashAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hash_HashAlgo.Descriptor instead.
func (Hash_HashAlgo) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{5, 0}
}

type FileDescriptor_FDType int32

const (
	FileDescriptor_FD_TYPE_UNKNOWN   FileDescriptor_FDType = 0
	FileDescriptor_FD_TYPE_ATALK     FileDescriptor_FDType = 1
	FileDescriptor_FD_TYPE_VNODE     FileDescriptor_FDType = 2
	FileDescriptor_FD_TYPE_SOCKET    FileDescriptor_FDType = 3
	FileDescriptor_FD_TYPE_PSHM      FileDescriptor_FDType = 4
	FileDescriptor_FD_TYPE_PSEM      FileDescriptor_FDType = 5
	FileDescriptor_FD_TYPE_KQUEUE    FileDescriptor_FDType = 6
	FileDescriptor_FD_TYPE_PIPE      FileDescriptor_FDType = 7
	FileDescriptor_FD_TYPE_FSEVENTS  FileDescriptor_FDType = 8
	FileDescriptor_FD_TYPE_NETPOLICY FileDescriptor_FDType = 9
	FileDescriptor_FD_TYPE_CHANNEL   FileDescriptor_FDType = 10
	FileDescriptor_FD_TYPE_NEXUS     FileDescriptor_FDType = 11
)

// Enum value maps for FileDescriptor_FDType.
var (
	FileDescriptor_FDType_name = map[int32]string{
		0:  "FD_TYPE_UNKNOWN",
		1:  "FD_TYPE_ATALK",
		2:  "FD_TYPE_VNODE",
		3:  "FD_TYPE_SOCKET",
		4:  "FD_TYPE_PSHM",
		5:  "FD_TYPE_PSEM",
		6:  "FD_TYPE_KQUEUE",
		7:  "FD_TYPE_PIPE",
		8:  "FD_TYPE_FSEVENTS",
		9:  "FD_TYPE_NETPOLICY",
		10: "FD_TYPE_CHANNEL",
		11: "FD_TYPE_NEXUS",
	}
	FileDescriptor_FDType_value = map[string]int32{
		"FD_TYPE_UNKNOWN":   0,
		"FD_TYPE_ATALK":     1,
		"FD_TYPE_VNODE":     2,
		"FD_TYPE_SOCKET":    3,
		"FD_TYPE_PSHM":      4,
		"FD_TYPE_PSEM":      5,
		"FD_TYPE_KQUEUE":    6,
		"FD_TYPE_PIPE":      7,
		"FD_TYPE_FSEVENTS":  8,
		"FD_TYPE_NETPOLICY": 9,
		"FD_TYPE_CHANNEL":   10,
		"FD_TYPE_NEXUS":     11,
	}
)

func (x FileDescriptor_FDType) Enum() *FileDescriptor_FDType {
	p := new(FileDescriptor_FDType)
	*p = x
	return p
}

func (x FileDescriptor_FDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileDescriptor_FDType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[1].Descriptor()
}

func (FileDescriptor_FDType) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[1]
}

func (x FileDescriptor_FDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileDescriptor_FDType.Descriptor instead.
func (FileDescriptor_FDType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{8, 0}
}

type ProcessTreeAnnotations_Originator int32

const (
	ProcessTreeAnnotations_UNSPECIFIED ProcessTreeAnnotations_Originator = 0
	ProcessTreeAnnotations_LOGIN       ProcessTreeAnnotations_Originator = 1
	ProcessTreeAnnotations_CRON        ProcessTreeAnnotations_Originator = 2
)

// Enum value maps for ProcessTreeAnnotations_Originator.
var (
	ProcessTreeAnnotations_Originator_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LOGIN",
		2: "CRON",
	}
	ProcessTreeAnnotations_Originator_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LOGIN":       1,
		"CRON":        2,
	}
)

func (x ProcessTreeAnnotations_Originator) Enum() *ProcessTreeAnnotations_Originator {
	p := new(ProcessTreeAnnotations_Originator)
	*p = x
	return p
}

func (x ProcessTreeAnnotations_Originator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessTreeAnnotations_Originator) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[2].Descriptor()
}

func (ProcessTreeAnnotations_Originator) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[2]
}

func (x ProcessTreeAnnotations_Originator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessTreeAnnotations_Originator.Descriptor instead.
func (ProcessTreeAnnotations_Originator) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{9, 0}
}

type Execution_Decision int32

const (
	Execution_DECISION_UNKNOWN Execution_Decision = 0
	Execution_DECISION_ALLOW   Execution_Decision = 1
	Execution_DECISION_DENY    Execution_Decision = 2
)

// Enum value maps for Execution_Decision.
var (
	Execution_Decision_name = map[int32]string{
		0: "DECISION_UNKNOWN",
		1: "DECISION_ALLOW",
		2: "DECISION_DENY",
	}
	Execution_Decision_value = map[string]int32{
		"DECISION_UNKNOWN": 0,
		"DECISION_ALLOW":   1,
		"DECISION_DENY":    2,
	}
)

func (x Execution_Decision) Enum() *Execution_Decision {
	p := new(Execution_Decision)
	*p = x
	return p
}

func (x Execution_Decision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution_Decision) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[3].Descriptor()
}

func (Execution_Decision) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[3]
}

func (x Execution_Decision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution_Decision.Descriptor instead.
func (Execution_Decision) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{15, 0}
}

type Execution_Reason int32

const (
	Execution_REASON_UNKNOWN            Execution_Reason = 0
	Execution_REASON_BINARY             Execution_Reason = 1
	Execution_REASON_CERT               Execution_Reason = 2
	Execution_REASON_COMPILER           Execution_Reason = 3
	Execution_REASON_PENDING_TRANSITIVE Execution_Reason = 5
	Execution_REASON_SCOPE              Execution_Reason = 6
	Execution_REASON_TEAM_ID            Execution_Reason = 7
	Execution_REASON_TRANSITIVE         Execution_Reason = 8
	Execution_REASON_LONG_PATH          Execution_Reason = 9
	Execution_REASON_NOT_RUNNING        Execution_Reason = 10
	Execution_REASON_SIGNING_ID         Execution_Reason = 11
	Execution_REASON_CDHASH             Execution_Reason = 12
)

// Enum value maps for Execution_Reason.
var (
	Execution_Reason_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "REASON_BINARY",
		2:  "REASON_CERT",
		3:  "REASON_COMPILER",
		5:  "REASON_PENDING_TRANSITIVE",
		6:  "REASON_SCOPE",
		7:  "REASON_TEAM_ID",
		8:  "REASON_TRANSITIVE",
		9:  "REASON_LONG_PATH",
		10: "REASON_NOT_RUNNING",
		11: "REASON_SIGNING_ID",
		12: "REASON_CDHASH",
	}
	Execution_Reason_value = map[string]int32{
		"REASON_UNKNOWN":            0,
		"REASON_BINARY":             1,
		"REASON_CERT":               2,
		"REASON_COMPILER":           3,
		"REASON_PENDING_TRANSITIVE": 5,
		"REASON_SCOPE":              6,
		"REASON_TEAM_ID":            7,
		"REASON_TRANSITIVE":         8,
		"REASON_LONG_PATH":          9,
		"REASON_NOT_RUNNING":        10,
		"REASON_SIGNING_ID":         11,
		"REASON_CDHASH":             12,
	}
)

func (x Execution_Reason) Enum() *Execution_Reason {
	p := new(Execution_Reason)
	*p = x
	return p
}

func (x Execution_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[4].Descriptor()
}

func (Execution_Reason) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[4]
}

func (x Execution_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution_Reason.Descriptor instead.
func (Execution_Reason) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{15, 1}
}

type Execution_Mode int32

const (
	Execution_MODE_UNKNOWN  Execution_Mode = 0
	Execution_MODE_LOCKDOWN Execution_Mode = 1
	Execution_MODE_MONITOR  Execution_Mode = 2
)

// Enum value maps for Execution_Mode.
var (
	Execution_Mode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_LOCKDOWN",
		2: "MODE_MONITOR",
	}
	Execution_Mode_value = map[string]int32{
		"MODE_UNKNOWN":  0,
		"MODE_LOCKDOWN": 1,
		"MODE_MONITOR":  2,
	}
)

func (x Execution_Mode) Enum() *Execution_Mode {
	p := new(Execution_Mode)
	*p = x
	return p
}

func (x Execution_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[5].Descriptor()
}

func (Execution_Mode) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[5]
}

func (x Execution_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution_Mode.Descriptor instead.
func (Execution_Mode) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{15, 2}
}

type Disk_Action int32

const (
	Disk_ACTION_UNKNOWN     Disk_Action = 0
	Disk_ACTION_APPEARED    Disk_Action = 1
	Disk_ACTION_DISAPPEARED Disk_Action = 2
)

// Enum value maps for Disk_Action.
var (
	Disk_Action_name = map[int32]string{
		0: "ACTION_UNKNOWN",
		1: "ACTION_APPEARED",
		2: "ACTION_DISAPPEARED",
	}
	Disk_Action_value = map[string]int32{
		"ACTION_UNKNOWN":     0,
		"ACTION_APPEARED":    1,
		"ACTION_DISAPPEARED": 2,
	}
)

func (x Disk_Action) Enum() *Disk_Action {
	p := new(Disk_Action)
	*p = x
	return p
}

func (x Disk_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disk_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[6].Descriptor()
}

func (Disk_Action) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[6]
}

func (x Disk_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disk_Action.Descriptor instead.
func (Disk_Action) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{25, 0}
}

type FileAccess_AccessType int32

const (
	FileAccess_ACCESS_TYPE_UNKNOWN      FileAccess_AccessType = 0
	FileAccess_ACCESS_TYPE_OPEN         FileAccess_AccessType = 1
	FileAccess_ACCESS_TYPE_RENAME       FileAccess_AccessType = 2
	FileAccess_ACCESS_TYPE_UNLINK       FileAccess_AccessType = 3
	FileAccess_ACCESS_TYPE_LINK         FileAccess_AccessType = 4
	FileAccess_ACCESS_TYPE_CLONE        FileAccess_AccessType = 5
	FileAccess_ACCESS_TYPE_EXCHANGEDATA FileAccess_AccessType = 6
	FileAccess_ACCESS_TYPE_COPYFILE     FileAccess_AccessType = 7
	FileAccess_ACCESS_TYPE_CREATE       FileAccess_AccessType = 8
	FileAccess_ACCESS_TYPE_TRUNCATE     FileAccess_AccessType = 9
)

// Enum value maps for FileAccess_AccessType.
var (
	FileAccess_AccessType_name = map[int32]string{
		0: "ACCESS_TYPE_UNKNOWN",
		1: "ACCESS_TYPE_OPEN",
		2: "ACCESS_TYPE_RENAME",
		3: "ACCESS_TYPE_UNLINK",
		4: "ACCESS_TYPE_LINK",
		5: "ACCESS_TYPE_CLONE",
		6: "ACCESS_TYPE_EXCHANGEDATA",
		7: "ACCESS_TYPE_COPYFILE",
		8: "ACCESS_TYPE_CREATE",
		9: "ACCESS_TYPE_TRUNCATE",
	}
	FileAccess_AccessType_value = map[string]int32{
		"ACCESS_TYPE_UNKNOWN":      0,
		"ACCESS_TYPE_OPEN":         1,
		"ACCESS_TYPE_RENAME":       2,
		"ACCESS_TYPE_UNLINK":       3,
		"ACCESS_TYPE_LINK":         4,
		"ACCESS_TYPE_CLONE":        5,
		"ACCESS_TYPE_EXCHANGEDATA": 6,
		"ACCESS_TYPE_COPYFILE":     7,
		"ACCESS_TYPE_CREATE":       8,
		"ACCESS_TYPE_TRUNCATE":     9,
	}
)

func (x FileAccess_AccessType) Enum() *FileAccess_AccessType {
	p := new(FileAccess_AccessType)
	*p = x
	return p
}

func (x FileAccess_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileAccess_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[7].Descriptor()
}

func (FileAccess_AccessType) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[7]
}

func (x FileAccess_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileAccess_AccessType.Descriptor instead.
func (FileAccess_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{28, 0}
}

type FileAccess_PolicyDecision int32

const (
	FileAccess_POLICY_DECISION_UNKNOWN                  FileAccess_PolicyDecision = 0
	FileAccess_POLICY_DECISION_DENIED                   FileAccess_PolicyDecision = 1
	FileAccess_POLICY_DECISION_DENIED_INVALID_SIGNATURE FileAccess_PolicyDecision = 2
	FileAccess_POLICY_DECISION_ALLOWED_AUDIT_ONLY       FileAccess_PolicyDecision = 3
)

// Enum value maps for FileAccess_PolicyDecision.
var (
	FileAccess_PolicyDecision_name = map[int32]string{
		0: "POLICY_DECISION_UNKNOWN",
		1: "POLICY_DECISION_DENIED",
		2: "POLICY_DECISION_DENIED_INVALID_SIGNATURE",
		3: "POLICY_DECISION_ALLOWED_AUDIT_ONLY",
	}
	FileAccess_PolicyDecision_value = map[string]int32{
		"POLICY_DECISION_UNKNOWN":                  0,
		"POLICY_DECISION_DENIED":                   1,
		"POLICY_DECISION_DENIED_INVALID_SIGNATURE": 2,
		"POLICY_DECISION_ALLOWED_AUDIT_ONLY":       3,
	}
)

func (x FileAccess_PolicyDecision) Enum() *FileAccess_PolicyDecision {
	p := new(FileAccess_PolicyDecision)
	*p = x
	return p
}

func (x FileAccess_PolicyDecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileAccess_PolicyDecision) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[8].Descriptor()
}

func (FileAccess_PolicyDecision) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[8]
}

func (x FileAccess_PolicyDecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileAccess_PolicyDecision.Descriptor instead.
func (FileAccess_PolicyDecision) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{28, 1}
}

type SocketAddress_Type int32

const (
	SocketAddress_TYPE_UNKNOWN      SocketAddress_Type = 0
	SocketAddress_TYPE_NONE         SocketAddress_Type = 1
	SocketAddress_TYPE_IPV4         SocketAddress_Type = 2
	SocketAddress_TYPE_IPV6         SocketAddress_Type = 3
	SocketAddress_TYPE_NAMED_SOCKET SocketAddress_Type = 4
)

// Enum value maps for SocketAddress_Type.
var (
	SocketAddress_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_NONE",
		2: "TYPE_IPV4",
		3: "TYPE_IPV6",
		4: "TYPE_NAMED_SOCKET",
	}
	SocketAddress_Type_value = map[string]int32{
		"TYPE_UNKNOWN":      0,
		"TYPE_NONE":         1,
		"TYPE_IPV4":         2,
		"TYPE_IPV6":         3,
		"TYPE_NAMED_SOCKET": 4,
	}
)

func (x SocketAddress_Type) Enum() *SocketAddress_Type {
	p := new(SocketAddress_Type)
	*p = x
	return p
}

func (x SocketAddress_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SocketAddress_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[9].Descriptor()
}

func (SocketAddress_Type) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[9]
}

func (x SocketAddress_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SocketAddress_Type.Descriptor instead.
func (SocketAddress_Type) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{30, 0}
}

type OpenSSHLogin_Result int32

const (
	OpenSSHLogin_RESULT_UNKNOWN               OpenSSHLogin_Result = 0
	OpenSSHLogin_RESULT_LOGIN_EXCEED_MAXTRIES OpenSSHLogin_Result = 1
	OpenSSHLogin_RESULT_LOGIN_ROOT_DENIED     OpenSSHLogin_Result = 2
	OpenSSHLogin_RESULT_AUTH_SUCCESS          OpenSSHLogin_Result = 3
	OpenSSHLogin_RESULT_AUTH_FAIL_NONE        OpenSSHLogin_Result = 4
	OpenSSHLogin_RESULT_AUTH_FAIL_PASSWD      OpenSSHLogin_Result = 5
	OpenSSHLogin_RESULT_AUTH_FAIL_KBDINT      OpenSSHLogin_Result = 6
	OpenSSHLogin_RESULT_AUTH_FAIL_PUBKEY      OpenSSHLogin_Result = 7
	OpenSSHLogin_RESULT_AUTH_FAIL_HOSTBASED   OpenSSHLogin_Result = 8
	OpenSSHLogin_RESULT_AUTH_FAIL_GSSAPI      OpenSSHLogin_Result = 9
	OpenSSHLogin_RESULT_INVALID_USER          OpenSSHLogin_Result = 10
)

// Enum value maps for OpenSSHLogin_Result.
var (
	OpenSSHLogin_Result_name = map[int32]string{
		0:  "RESULT_UNKNOWN",
		1:  "RESULT_LOGIN_EXCEED_MAXTRIES",
		2:  "RESULT_LOGIN_ROOT_DENIED",
		3:  "RESULT_AUTH_SUCCESS",
		4:  "RESULT_AUTH_FAIL_NONE",
		5:  "RESULT_AUTH_FAIL_PASSWD",
		6:  "RESULT_AUTH_FAIL_KBDINT",
		7:  "RESULT_AUTH_FAIL_PUBKEY",
		8:  "RESULT_AUTH_FAIL_HOSTBASED",
		9:  "RESULT_AUTH_FAIL_GSSAPI",
		10: "RESULT_INVALID_USER",
	}
	OpenSSHLogin_Result_value = map[string]int32{
		"RESULT_UNKNOWN":               0,
		"RESULT_LOGIN_EXCEED_MAXTRIES": 1,
		"RESULT_LOGIN_ROOT_DENIED":     2,
		"RESULT_AUTH_SUCCESS":          3,
		"RESULT_AUTH_FAIL_NONE":        4,
		"RESULT_AUTH_FAIL_PASSWD":      5,
		"RESULT_AUTH_FAIL_KBDINT":      6,
		"RESULT_AUTH_FAIL_PUBKEY":      7,
		"RESULT_AUTH_FAIL_HOSTBASED":   8,
		"RESULT_AUTH_FAIL_GSSAPI":      9,
		"RESULT_INVALID_USER":          10,
	}
)

func (x OpenSSHLogin_Result) Enum() *OpenSSHLogin_Result {
	p := new(OpenSSHLogin_Result)
	*p = x
	return p
}

func (x OpenSSHLogin_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenSSHLogin_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_proto_enumTypes[10].Descriptor()
}

func (OpenSSHLogin_Result) Type() protoreflect.EnumType {
	return &file_telemetry_v1_proto_enumTypes[10]
}

func (x OpenSSHLogin_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenSSHLogin_Result.Descriptor instead.
func (OpenSSHLogin_Result) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{42, 0}
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  *int32  `protobuf:"varint,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid  *int32  `protobuf:"varint,1,opt,name=gid,proto3,oneof" json:"gid,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{1}
}

func (x *GroupInfo) GetGid() int32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *GroupInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ProcessID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid        *int32 `protobuf:"varint,1,opt,name=pid,proto3,oneof" json:"pid,omitempty"`
	Pidversion *int32 `protobuf:"varint,2,opt,name=pidversion,proto3,oneof" json:"pidversion,omitempty"`
}

func (x *ProcessID) Reset() {
	*x = ProcessID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessID) ProtoMessage() {}

func (x *ProcessID) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessID.ProtoReflect.Descriptor instead.
func (*ProcessID) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessID) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessID) GetPidversion() int32 {
	if x != nil && x.Pidversion != nil {
		return *x.Pidversion
	}
	return 0
}

type CodeSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cdhash    []byte  `protobuf:"bytes,1,opt,name=cdhash,proto3,oneof" json:"cdhash,omitempty"`
	SigningId *string `protobuf:"bytes,2,opt,name=signing_id,json=signingId,proto3,oneof" json:"signing_id,omitempty"`
	TeamId    *string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
}

func (x *CodeSignature) Reset() {
	*x = CodeSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSignature) ProtoMessage() {}

func (x *CodeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSignature.ProtoReflect.Descriptor instead.
func (*CodeSignature) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{3}
}

func (x *CodeSignature) GetCdhash() []byte {
	if x != nil {
		return x.Cdhash
	}
	return nil
}

func (x *CodeSignature) GetSigningId() string {
	if x != nil && x.SigningId != nil {
		return *x.SigningId
	}
	return ""
}

func (x *CodeSignature) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev              *int32                 `protobuf:"varint,1,opt,name=dev,proto3,oneof" json:"dev,omitempty"`
	Mode             *uint32                `protobuf:"varint,2,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	Nlink            *uint32                `protobuf:"varint,3,opt,name=nlink,proto3,oneof" json:"nlink,omitempty"`
	Ino              *uint64                `protobuf:"varint,4,opt,name=ino,proto3,oneof" json:"ino,omitempty"`
	User             *UserInfo              `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Group            *GroupInfo             `protobuf:"bytes,6,opt,name=group,proto3,oneof" json:"group,omitempty"`
	Rdev             *int32                 `protobuf:"varint,7,opt,name=rdev,proto3,oneof" json:"rdev,omitempty"`
	AccessTime       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=access_time,json=accessTime,proto3,oneof" json:"access_time,omitempty"`
	ModificationTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=modification_time,json=modificationTime,proto3,oneof" json:"modification_time,omitempty"`
	ChangeTime       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=change_time,json=changeTime,proto3,oneof" json:"change_time,omitempty"`
	BirthTime        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=birth_time,json=birthTime,proto3,oneof" json:"birth_time,omitempty"`
	Size             *int64                 `protobuf:"varint,12,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Blocks           *int64                 `protobuf:"varint,13,opt,name=blocks,proto3,oneof" json:"blocks,omitempty"`
	Blksize          *int32                 `protobuf:"varint,14,opt,name=blksize,proto3,oneof" json:"blksize,omitempty"`
	Flags            *uint32                `protobuf:"varint,15,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	Gen              *int32                 `protobuf:"varint,16,opt,name=gen,proto3,oneof" json:"gen,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{4}
}

func (x *Stat) GetDev() int32 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Stat) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *Stat) GetNlink() uint32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

func (x *Stat) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Stat) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Stat) GetGroup() *GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Stat) GetRdev() int32 {
	if x != nil && x.Rdev != nil {
		return *x.Rdev
	}
	return 0
}

func (x *Stat) GetAccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessTime
	}
	return nil
}

func (x *Stat) GetModificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModificationTime
	}
	return nil
}

func (x *Stat) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *Stat) GetBirthTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthTime
	}
	return nil
}

func (x *Stat) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Stat) GetBlocks() int64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *Stat) GetBlksize() int32 {
	if x != nil && x.Blksize != nil {
		return *x.Blksize
	}
	return 0
}

func (x *Stat) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Stat) GetGen() int32 {
	if x != nil && x.Gen != nil {
		return *x.Gen
	}
	return 0
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Hash_HashAlgo `protobuf:"varint,1,opt,name=type,proto3,enum=santa.telemetry.v1.Hash_HashAlgo,oneof" json:"type,omitempty"`
	Hash *string        `protobuf:"bytes,2,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{5}
}

func (x *Hash) GetType() Hash_HashAlgo {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Hash_HASH_ALGO_UNKNOWN
}

func (x *Hash) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      *string `protobuf:"bytes,1,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Truncated *bool   `protobuf:"varint,2,opt,name=truncated,proto3,oneof" json:"truncated,omitempty"`
	Stat      *Stat   `protobuf:"bytes,3,opt,name=stat,proto3,oneof" json:"stat,omitempty"`
	Hash      *Hash   `protobuf:"bytes,4,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{6}
}

func (x *FileInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FileInfo) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

func (x *FileInfo) GetStat() *Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *FileInfo) GetHash() *Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

type FileInfoLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      *string `protobuf:"bytes,1,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Truncated *bool   `protobuf:"varint,2,opt,name=truncated,proto3,oneof" json:"truncated,omitempty"`
}

func (x *FileInfoLight) Reset() {
	*x = FileInfoLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoLight) ProtoMessage() {}

func (x *FileInfoLight) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoLight.ProtoReflect.Descriptor instead.
func (*FileInfoLight) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{7}
}

func (x *FileInfoLight) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FileInfoLight) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

type FileDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     *int32                 `protobuf:"varint,1,opt,name=fd,proto3,oneof" json:"fd,omitempty"`
	FdType *FileDescriptor_FDType `protobuf:"varint,2,opt,name=fd_type,json=fdType,proto3,enum=santa.telemetry.v1.FileDescriptor_FDType,oneof" json:"fd_type,omitempty"`
	PipeId *uint64                `protobuf:"varint,3,opt,name=pipe_id,json=pipeId,proto3,oneof" json:"pipe_id,omitempty"`
}

func (x *FileDescriptor) Reset() {
	*x = FileDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptor) ProtoMessage() {}

func (x *FileDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptor.ProtoReflect.Descriptor instead.
func (*FileDescriptor) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{8}
}

func (x *FileDescriptor) GetFd() int32 {
	if x != nil && x.Fd != nil {
		return *x.Fd
	}
	return 0
}

func (x *FileDescriptor) GetFdType() FileDescriptor_FDType {
	if x != nil && x.FdType != nil {
		return *x.FdType
	}
	return FileDescriptor_FD_TYPE_UNKNOWN
}

func (x *FileDescriptor) GetPipeId() uint64 {
	if x != nil && x.PipeId != nil {
		return *x.PipeId
	}
	return 0
}

type ProcessTreeAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Originator ProcessTreeAnnotations_Originator `protobuf:"varint,1,opt,name=originator,proto3,enum=santa.telemetry.v1.ProcessTreeAnnotations_Originator" json:"originator,omitempty"`
}

func (x *ProcessTreeAnnotations) Reset() {
	*x = ProcessTreeAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTreeAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTreeAnnotations) ProtoMessage() {}

func (x *ProcessTreeAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTreeAnnotations.ProtoReflect.Descriptor instead.
func (*ProcessTreeAnnotations) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessTreeAnnotations) GetOriginator() ProcessTreeAnnotations_Originator {
	if x != nil {
		return x.Originator
	}
	return ProcessTreeAnnotations_UNSPECIFIED
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *ProcessID              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ParentId          *ProcessID              `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResponsibleId     *ProcessID              `protobuf:"bytes,3,opt,name=responsible_id,json=responsibleId,proto3,oneof" json:"responsible_id,omitempty"`
	OriginalParentPid *int32                  `protobuf:"varint,4,opt,name=original_parent_pid,json=originalParentPid,proto3,oneof" json:"original_parent_pid,omitempty"`
	GroupId           *int32                  `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	SessionId         *int32                  `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
	EffectiveUser     *UserInfo               `protobuf:"bytes,7,opt,name=effective_user,json=effectiveUser,proto3,oneof" json:"effective_user,omitempty"`
	EffectiveGroup    *GroupInfo              `protobuf:"bytes,8,opt,name=effective_group,json=effectiveGroup,proto3,oneof" json:"effective_group,omitempty"`
	RealUser          *UserInfo               `protobuf:"bytes,9,opt,name=real_user,json=realUser,proto3,oneof" json:"real_user,omitempty"`
	RealGroup         *GroupInfo              `protobuf:"bytes,10,opt,name=real_group,json=realGroup,proto3,oneof" json:"real_group,omitempty"`
	IsPlatformBinary  *bool                   `protobuf:"varint,11,opt,name=is_platform_binary,json=isPlatformBinary,proto3,oneof" json:"is_platform_binary,omitempty"`
	IsEsClient        *bool                   `protobuf:"varint,12,opt,name=is_es_client,json=isEsClient,proto3,oneof" json:"is_es_client,omitempty"`
	CodeSignature     *CodeSignature          `protobuf:"bytes,13,opt,name=code_signature,json=codeSignature,proto3,oneof" json:"code_signature,omitempty"`
	CsFlags           *uint32                 `protobuf:"varint,14,opt,name=cs_flags,json=csFlags,proto3,oneof" json:"cs_flags,omitempty"`
	Executable        *FileInfo               `protobuf:"bytes,15,opt,name=executable,proto3,oneof" json:"executable,omitempty"`
	Tty               *FileInfoLight          `protobuf:"bytes,16,opt,name=tty,proto3,oneof" json:"tty,omitempty"`
	StartTime         *timestamppb.Timestamp  `protobuf:"bytes,17,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Annotations       *ProcessTreeAnnotations `protobuf:"bytes,18,opt,name=annotations,proto3,oneof" json:"annotations,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessInfo) GetId() *ProcessID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcessInfo) GetParentId() *ProcessID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *ProcessInfo) GetResponsibleId() *ProcessID {
	if x != nil {
		return x.ResponsibleId
	}
	return nil
}

func (x *ProcessInfo) GetOriginalParentPid() int32 {
	if x != nil && x.OriginalParentPid != nil {
		return *x.OriginalParentPid
	}
	return 0
}

func (x *ProcessInfo) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProcessInfo) GetSessionId() int32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *ProcessInfo) GetEffectiveUser() *UserInfo {
	if x != nil {
		return x.EffectiveUser
	}
	return nil
}

func (x *ProcessInfo) GetEffectiveGroup() *GroupInfo {
	if x != nil {
		return x.EffectiveGroup
	}
	return nil
}

func (x *ProcessInfo) GetRealUser() *UserInfo {
	if x != nil {
		return x.RealUser
	}
	return nil
}

func (x *ProcessInfo) GetRealGroup() *GroupInfo {
	if x != nil {
		return x.RealGroup
	}
	return nil
}

func (x *ProcessInfo) GetIsPlatformBinary() bool {
	if x != nil && x.IsPlatformBinary != nil {
		return *x.IsPlatformBinary
	}
	return false
}

func (x *ProcessInfo) GetIsEsClient() bool {
	if x != nil && x.IsEsClient != nil {
		return *x.IsEsClient
	}
	return false
}

func (x *ProcessInfo) GetCodeSignature() *CodeSignature {
	if x != nil {
		return x.CodeSignature
	}
	return nil
}

func (x *ProcessInfo) GetCsFlags() uint32 {
	if x != nil && x.CsFlags != nil {
		return *x.CsFlags
	}
	return 0
}

func (x *ProcessInfo) GetExecutable() *FileInfo {
	if x != nil {
		return x.Executable
	}
	return nil
}

func (x *ProcessInfo) GetTty() *FileInfoLight {
	if x != nil {
		return x.Tty
	}
	return nil
}

func (x *ProcessInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ProcessInfo) GetAnnotations() *ProcessTreeAnnotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type ProcessInfoLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *ProcessID              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ParentId          *ProcessID              `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	OriginalParentPid *int32                  `protobuf:"varint,3,opt,name=original_parent_pid,json=originalParentPid,proto3,oneof" json:"original_parent_pid,omitempty"`
	GroupId           *int32                  `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	SessionId         *int32                  `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`
	EffectiveUser     *UserInfo               `protobuf:"bytes,6,opt,name=effective_user,json=effectiveUser,proto3,oneof" json:"effective_user,omitempty"`
	EffectiveGroup    *GroupInfo              `protobuf:"bytes,7,opt,name=effective_group,json=effectiveGroup,proto3,oneof" json:"effective_group,omitempty"`
	RealUser          *UserInfo               `protobuf:"bytes,8,opt,name=real_user,json=realUser,proto3,oneof" json:"real_user,omitempty"`
	RealGroup         *GroupInfo              `protobuf:"bytes,9,opt,name=real_group,json=realGroup,proto3,oneof" json:"real_group,omitempty"`
	Executable        *FileInfoLight          `protobuf:"bytes,10,opt,name=executable,proto3,oneof" json:"executable,omitempty"`
	Annotations       *ProcessTreeAnnotations `protobuf:"bytes,11,opt,name=annotations,proto3,oneof" json:"annotations,omitempty"`
}

func (x *ProcessInfoLight) Reset() {
	*x = ProcessInfoLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfoLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoLight) ProtoMessage() {}

func (x *ProcessInfoLight) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoLight.ProtoReflect.Descriptor instead.
func (*ProcessInfoLight) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{11}
}

func (x *ProcessInfoLight) GetId() *ProcessID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcessInfoLight) GetParentId() *ProcessID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *ProcessInfoLight) GetOriginalParentPid() int32 {
	if x != nil && x.OriginalParentPid != nil {
		return *x.OriginalParentPid
	}
	return 0
}

func (x *ProcessInfoLight) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProcessInfoLight) GetSessionId() int32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *ProcessInfoLight) GetEffectiveUser() *UserInfo {
	if x != nil {
		return x.EffectiveUser
	}
	return nil
}

func (x *ProcessInfoLight) GetEffectiveGroup() *GroupInfo {
	if x != nil {
		return x.EffectiveGroup
	}
	return nil
}

func (x *ProcessInfoLight) GetRealUser() *UserInfo {
	if x != nil {
		return x.RealUser
	}
	return nil
}

func (x *ProcessInfoLight) GetRealGroup() *GroupInfo {
	if x != nil {
		return x.RealGroup
	}
	return nil
}

func (x *ProcessInfoLight) GetExecutable() *FileInfoLight {
	if x != nil {
		return x.Executable
	}
	return nil
}

func (x *ProcessInfoLight) GetAnnotations() *ProcessTreeAnnotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       *Hash   `protobuf:"bytes,1,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
	CommonName *string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3,oneof" json:"common_name,omitempty"`
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{12}
}

func (x *CertificateInfo) GetHash() *Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *CertificateInfo) GetCommonName() string {
	if x != nil && x.CommonName != nil {
		return *x.CommonName
	}
	return ""
}

type Entitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Entitlement) Reset() {
	*x = Entitlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entitlement) ProtoMessage() {}

func (x *Entitlement) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entitlement.ProtoReflect.Descriptor instead.
func (*Entitlement) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{13}
}

func (x *Entitlement) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Entitlement) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type EntitlementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntitlementsFiltered *bool          `protobuf:"varint,1,opt,name=entitlements_filtered,json=entitlementsFiltered,proto3,oneof" json:"entitlements_filtered,omitempty"`
	Entitlements         []*Entitlement `protobuf:"bytes,2,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
}

func (x *EntitlementInfo) Reset() {
	*x = EntitlementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitlementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementInfo) ProtoMessage() {}

func (x *EntitlementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementInfo.ProtoReflect.Descriptor instead.
func (*EntitlementInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{14}
}

func (x *EntitlementInfo) GetEntitlementsFiltered() bool {
	if x != nil && x.EntitlementsFiltered != nil {
		return *x.EntitlementsFiltered
	}
	return false
}

func (x *EntitlementInfo) GetEntitlements() []*Entitlement {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator       *ProcessInfoLight   `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Target           *ProcessInfo        `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
	Script           *FileInfo           `protobuf:"bytes,3,opt,name=script,proto3,oneof" json:"script,omitempty"`
	WorkingDirectory *FileInfo           `protobuf:"bytes,4,opt,name=working_directory,json=workingDirectory,proto3,oneof" json:"working_directory,omitempty"`
	Args             [][]byte            `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Envs             [][]byte            `protobuf:"bytes,6,rep,name=envs,proto3" json:"envs,omitempty"`
	Fds              []*FileDescriptor   `protobuf:"bytes,7,rep,name=fds,proto3" json:"fds,omitempty"`
	FdListTruncated  *bool               `protobuf:"varint,8,opt,name=fd_list_truncated,json=fdListTruncated,proto3,oneof" json:"fd_list_truncated,omitempty"`
	Decision         *Execution_Decision `protobuf:"varint,9,opt,name=decision,proto3,enum=santa.telemetry.v1.Execution_Decision,oneof" json:"decision,omitempty"`
	Reason           *Execution_Reason   `protobuf:"varint,10,opt,name=reason,proto3,enum=santa.telemetry.v1.Execution_Reason,oneof" json:"reason,omitempty"`
	Mode             *Execution_Mode     `protobuf:"varint,11,opt,name=mode,proto3,enum=santa.telemetry.v1.Execution_Mode,oneof" json:"mode,omitempty"`
	CertificateInfo  *CertificateInfo    `protobuf:"bytes,12,opt,name=certificate_info,json=certificateInfo,proto3,oneof" json:"certificate_info,omitempty"`
	Explain          *string             `protobuf:"bytes,13,opt,name=explain,proto3,oneof" json:"explain,omitempty"`
	QuarantineUrl    *string             `protobuf:"bytes,14,opt,name=quarantine_url,json=quarantineUrl,proto3,oneof" json:"quarantine_url,omitempty"`
	OriginalPath     *string             `protobuf:"bytes,15,opt,name=original_path,json=originalPath,proto3,oneof" json:"original_path,omitempty"`
	EntitlementInfo  *EntitlementInfo    `protobuf:"bytes,16,opt,name=entitlement_info,json=entitlementInfo,proto3,oneof" json:"entitlement_info,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{15}
}

func (x *Execution) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Execution) GetTarget() *ProcessInfo {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Execution) GetScript() *FileInfo {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Execution) GetWorkingDirectory() *FileInfo {
	if x != nil {
		return x.WorkingDirectory
	}
	return nil
}

func (x *Execution) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Execution) GetEnvs() [][]byte {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *Execution) GetFds() []*FileDescriptor {
	if x != nil {
		return x.Fds
	}
	return nil
}

func (x *Execution) GetFdListTruncated() bool {
	if x != nil && x.FdListTruncated != nil {
		return *x.FdListTruncated
	}
	return false
}

func (x *Execution) GetDecision() Execution_Decision {
	if x != nil && x.Decision != nil {
		return *x.Decision
	}
	return Execution_DECISION_UNKNOWN
}

func (x *Execution) GetReason() Execution_Reason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return Execution_REASON_UNKNOWN
}

func (x *Execution) GetMode() Execution_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Execution_MODE_UNKNOWN
}

func (x *Execution) GetCertificateInfo() *CertificateInfo {
	if x != nil {
		return x.CertificateInfo
	}
	return nil
}

func (x *Execution) GetExplain() string {
	if x != nil && x.Explain != nil {
		return *x.Explain
	}
	return ""
}

func (x *Execution) GetQuarantineUrl() string {
	if x != nil && x.QuarantineUrl != nil {
		return *x.QuarantineUrl
	}
	return ""
}

func (x *Execution) GetOriginalPath() string {
	if x != nil && x.OriginalPath != nil {
		return *x.OriginalPath
	}
	return ""
}

func (x *Execution) GetEntitlementInfo() *EntitlementInfo {
	if x != nil {
		return x.EntitlementInfo
	}
	return nil
}

type Fork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Child      *ProcessInfoLight `protobuf:"bytes,2,opt,name=child,proto3,oneof" json:"child,omitempty"`
}

func (x *Fork) Reset() {
	*x = Fork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fork) ProtoMessage() {}

func (x *Fork) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fork.ProtoReflect.Descriptor instead.
func (*Fork) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{16}
}

func (x *Fork) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Fork) GetChild() *ProcessInfoLight {
	if x != nil {
		return x.Child
	}
	return nil
}

type Exit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	// Types that are assignable to ExitType:
	//
	//	*Exit_Exited_
	//	*Exit_Signaled_
	//	*Exit_Stopped
	ExitType isExit_ExitType `protobuf_oneof:"ExitType"`
}

func (x *Exit) Reset() {
	*x = Exit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exit) ProtoMessage() {}

func (x *Exit) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exit.ProtoReflect.Descriptor instead.
func (*Exit) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{17}
}

func (x *Exit) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (m *Exit) GetExitType() isExit_ExitType {
	if m != nil {
		return m.ExitType
	}
	return nil
}

func (x *Exit) GetExited() *Exit_Exited {
	if x, ok := x.GetExitType().(*Exit_Exited_); ok {
		return x.Exited
	}
	return nil
}

func (x *Exit) GetSignaled() *Exit_Signaled {
	if x, ok := x.GetExitType().(*Exit_Signaled_); ok {
		return x.Signaled
	}
	return nil
}

func (x *Exit) GetStopped() *Exit_Signaled {
	if x, ok := x.GetExitType().(*Exit_Stopped); ok {
		return x.Stopped
	}
	return nil
}

type isExit_ExitType interface {
	isExit_ExitType()
}

type Exit_Exited_ struct {
	Exited *Exit_Exited `protobuf:"bytes,2,opt,name=exited,proto3,oneof"`
}

type Exit_Signaled_ struct {
	Signaled *Exit_Signaled `protobuf:"bytes,3,opt,name=signaled,proto3,oneof"`
}

type Exit_Stopped struct {
	Stopped *Exit_Signaled `protobuf:"bytes,4,opt,name=stopped,proto3,oneof"`
}

func (*Exit_Exited_) isExit_ExitType() {}

func (*Exit_Signaled_) isExit_ExitType() {}

func (*Exit_Stopped) isExit_ExitType() {}

type Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Target     *FileInfo         `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
	Flags      *int32            `protobuf:"varint,3,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
}

func (x *Open) Reset() {
	*x = Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open) ProtoMessage() {}

func (x *Open) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open.ProtoReflect.Descriptor instead.
func (*Open) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{18}
}

func (x *Open) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Open) GetTarget() *FileInfo {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Open) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Target     *FileInfo         `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
	Modified   *bool             `protobuf:"varint,3,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
}

func (x *Close) Reset() {
	*x = Close{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{19}
}

func (x *Close) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Close) GetTarget() *FileInfo {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Close) GetModified() bool {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return false
}

type Exchangedata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	File1      *FileInfo         `protobuf:"bytes,2,opt,name=file1,proto3,oneof" json:"file1,omitempty"`
	File2      *FileInfo         `protobuf:"bytes,3,opt,name=file2,proto3,oneof" json:"file2,omitempty"`
}

func (x *Exchangedata) Reset() {
	*x = Exchangedata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exchangedata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exchangedata) ProtoMessage() {}

func (x *Exchangedata) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exchangedata.ProtoReflect.Descriptor instead.
func (*Exchangedata) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{20}
}

func (x *Exchangedata) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Exchangedata) GetFile1() *FileInfo {
	if x != nil {
		return x.File1
	}
	return nil
}

func (x *Exchangedata) GetFile2() *FileInfo {
	if x != nil {
		return x.File2
	}
	return nil
}

type Rename struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator    *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Source        *FileInfo         `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Target        *string           `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
	TargetExisted *bool             `protobuf:"varint,4,opt,name=target_existed,json=targetExisted,proto3,oneof" json:"target_existed,omitempty"`
}

func (x *Rename) Reset() {
	*x = Rename{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rename) ProtoMessage() {}

func (x *Rename) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rename.ProtoReflect.Descriptor instead.
func (*Rename) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{21}
}

func (x *Rename) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Rename) GetSource() *FileInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Rename) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *Rename) GetTargetExisted() bool {
	if x != nil && x.TargetExisted != nil {
		return *x.TargetExisted
	}
	return false
}

type Unlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Target     *FileInfo         `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *Unlink) Reset() {
	*x = Unlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unlink) ProtoMessage() {}

func (x *Unlink) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unlink.ProtoReflect.Descriptor instead.
func (*Unlink) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{22}
}

func (x *Unlink) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Unlink) GetTarget() *FileInfo {
	if x != nil {
		return x.Target
	}
	return nil
}

type CodesigningInvalidated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
}

func (x *CodesigningInvalidated) Reset() {
	*x = CodesigningInvalidated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodesigningInvalidated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodesigningInvalidated) ProtoMessage() {}

func (x *CodesigningInvalidated) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodesigningInvalidated.ProtoReflect.Descriptor instead.
func (*CodesigningInvalidated) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{23}
}

func (x *CodesigningInvalidated) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Source     *FileInfo         `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Target     *string           `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{24}
}

func (x *Link) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Link) GetSource() *FileInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Link) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     *Disk_Action           `protobuf:"varint,1,opt,name=action,proto3,enum=santa.telemetry.v1.Disk_Action,oneof" json:"action,omitempty"`
	Mount      *string                `protobuf:"bytes,2,opt,name=mount,proto3,oneof" json:"mount,omitempty"`
	Volume     *string                `protobuf:"bytes,3,opt,name=volume,proto3,oneof" json:"volume,omitempty"`
	BsdName    *string                `protobuf:"bytes,4,opt,name=bsd_name,json=bsdName,proto3,oneof" json:"bsd_name,omitempty"`
	Fs         *string                `protobuf:"bytes,5,opt,name=fs,proto3,oneof" json:"fs,omitempty"`
	Model      *string                `protobuf:"bytes,6,opt,name=model,proto3,oneof" json:"model,omitempty"`
	Serial     *string                `protobuf:"bytes,7,opt,name=serial,proto3,oneof" json:"serial,omitempty"`
	Bus        *string                `protobuf:"bytes,8,opt,name=bus,proto3,oneof" json:"bus,omitempty"`
	DmgPath    *string                `protobuf:"bytes,9,opt,name=dmg_path,json=dmgPath,proto3,oneof" json:"dmg_path,omitempty"`
	Appearance *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=appearance,proto3,oneof" json:"appearance,omitempty"`
	MountFrom  *string                `protobuf:"bytes,11,opt,name=mount_from,json=mountFrom,proto3,oneof" json:"mount_from,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{25}
}

func (x *Disk) GetAction() Disk_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Disk_ACTION_UNKNOWN
}

func (x *Disk) GetMount() string {
	if x != nil && x.Mount != nil {
		return *x.Mount
	}
	return ""
}

func (x *Disk) GetVolume() string {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return ""
}

func (x *Disk) GetBsdName() string {
	if x != nil && x.BsdName != nil {
		return *x.BsdName
	}
	return ""
}

func (x *Disk) GetFs() string {
	if x != nil && x.Fs != nil {
		return *x.Fs
	}
	return ""
}

func (x *Disk) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Disk) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *Disk) GetBus() string {
	if x != nil && x.Bus != nil {
		return *x.Bus
	}
	return ""
}

func (x *Disk) GetDmgPath() string {
	if x != nil && x.DmgPath != nil {
		return *x.DmgPath
	}
	return ""
}

func (x *Disk) GetAppearance() *timestamppb.Timestamp {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *Disk) GetMountFrom() string {
	if x != nil && x.MountFrom != nil {
		return *x.MountFrom
	}
	return ""
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHash   *Hash   `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3,oneof" json:"file_hash,omitempty"`
	BundleHash *Hash   `protobuf:"bytes,2,opt,name=bundle_hash,json=bundleHash,proto3,oneof" json:"bundle_hash,omitempty"`
	BundleName *string `protobuf:"bytes,3,opt,name=bundle_name,json=bundleName,proto3,oneof" json:"bundle_name,omitempty"`
	BundleId   *string `protobuf:"bytes,4,opt,name=bundle_id,json=bundleId,proto3,oneof" json:"bundle_id,omitempty"`
	BundlePath *string `protobuf:"bytes,5,opt,name=bundle_path,json=bundlePath,proto3,oneof" json:"bundle_path,omitempty"`
	Path       *string `protobuf:"bytes,6,opt,name=path,proto3,oneof" json:"path,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{26}
}

func (x *Bundle) GetFileHash() *Hash {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *Bundle) GetBundleHash() *Hash {
	if x != nil {
		return x.BundleHash
	}
	return nil
}

func (x *Bundle) GetBundleName() string {
	if x != nil && x.BundleName != nil {
		return *x.BundleName
	}
	return ""
}

func (x *Bundle) GetBundleId() string {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return ""
}

func (x *Bundle) GetBundlePath() string {
	if x != nil && x.BundlePath != nil {
		return *x.BundlePath
	}
	return ""
}

func (x *Bundle) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type Allowlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Target     *FileInfo         `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
}

func (x *Allowlist) Reset() {
	*x = Allowlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allowlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allowlist) ProtoMessage() {}

func (x *Allowlist) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allowlist.ProtoReflect.Descriptor instead.
func (*Allowlist) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{27}
}

func (x *Allowlist) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Allowlist) GetTarget() *FileInfo {
	if x != nil {
		return x.Target
	}
	return nil
}

type FileAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator     *ProcessInfo               `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Target         *FileInfoLight             `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
	PolicyVersion  *string                    `protobuf:"bytes,3,opt,name=policy_version,json=policyVersion,proto3,oneof" json:"policy_version,omitempty"`
	PolicyName     *string                    `protobuf:"bytes,4,opt,name=policy_name,json=policyName,proto3,oneof" json:"policy_name,omitempty"`
	AccessType     *FileAccess_AccessType     `protobuf:"varint,5,opt,name=access_type,json=accessType,proto3,enum=santa.telemetry.v1.FileAccess_AccessType,oneof" json:"access_type,omitempty"`
	PolicyDecision *FileAccess_PolicyDecision `protobuf:"varint,6,opt,name=policy_decision,json=policyDecision,proto3,enum=santa.telemetry.v1.FileAccess_PolicyDecision,oneof" json:"policy_decision,omitempty"`
}

func (x *FileAccess) Reset() {
	*x = FileAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAccess) ProtoMessage() {}

func (x *FileAccess) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAccess.ProtoReflect.Descriptor instead.
func (*FileAccess) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{28}
}

func (x *FileAccess) GetInstigator() *ProcessInfo {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *FileAccess) GetTarget() *FileInfoLight {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *FileAccess) GetPolicyVersion() string {
	if x != nil && x.PolicyVersion != nil {
		return *x.PolicyVersion
	}
	return ""
}

func (x *FileAccess) GetPolicyName() string {
	if x != nil && x.PolicyName != nil {
		return *x.PolicyName
	}
	return ""
}

func (x *FileAccess) GetAccessType() FileAccess_AccessType {
	if x != nil && x.AccessType != nil {
		return *x.AccessType
	}
	return FileAccess_ACCESS_TYPE_UNKNOWN
}

func (x *FileAccess) GetPolicyDecision() FileAccess_PolicyDecision {
	if x != nil && x.PolicyDecision != nil {
		return *x.PolicyDecision
	}
	return FileAccess_POLICY_DECISION_UNKNOWN
}

type GraphicalSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *GraphicalSession) Reset() {
	*x = GraphicalSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphicalSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphicalSession) ProtoMessage() {}

func (x *GraphicalSession) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphicalSession.ProtoReflect.Descriptor instead.
func (*GraphicalSession) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{29}
}

func (x *GraphicalSession) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SocketAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte              `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Type    *SocketAddress_Type `protobuf:"varint,2,opt,name=type,proto3,enum=santa.telemetry.v1.SocketAddress_Type,oneof" json:"type,omitempty"`
}

func (x *SocketAddress) Reset() {
	*x = SocketAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketAddress) ProtoMessage() {}

func (x *SocketAddress) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketAddress.ProtoReflect.Descriptor instead.
func (*SocketAddress) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{30}
}

func (x *SocketAddress) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SocketAddress) GetType() SocketAddress_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SocketAddress_TYPE_UNKNOWN
}

type LoginWindowSessionLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator       *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	User             *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	GraphicalSession *GraphicalSession `protobuf:"bytes,3,opt,name=graphical_session,json=graphicalSession,proto3,oneof" json:"graphical_session,omitempty"`
}

func (x *LoginWindowSessionLogin) Reset() {
	*x = LoginWindowSessionLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWindowSessionLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWindowSessionLogin) ProtoMessage() {}

func (x *LoginWindowSessionLogin) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWindowSessionLogin.ProtoReflect.Descriptor instead.
func (*LoginWindowSessionLogin) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{31}
}

func (x *LoginWindowSessionLogin) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *LoginWindowSessionLogin) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginWindowSessionLogin) GetGraphicalSession() *GraphicalSession {
	if x != nil {
		return x.GraphicalSession
	}
	return nil
}

type LoginWindowSessionLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator       *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	User             *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	GraphicalSession *GraphicalSession `protobuf:"bytes,3,opt,name=graphical_session,json=graphicalSession,proto3,oneof" json:"graphical_session,omitempty"`
}

func (x *LoginWindowSessionLogout) Reset() {
	*x = LoginWindowSessionLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWindowSessionLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWindowSessionLogout) ProtoMessage() {}

func (x *LoginWindowSessionLogout) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWindowSessionLogout.ProtoReflect.Descriptor instead.
func (*LoginWindowSessionLogout) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{32}
}

func (x *LoginWindowSessionLogout) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *LoginWindowSessionLogout) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginWindowSessionLogout) GetGraphicalSession() *GraphicalSession {
	if x != nil {
		return x.GraphicalSession
	}
	return nil
}

type LoginWindowSessionLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator       *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	User             *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	GraphicalSession *GraphicalSession `protobuf:"bytes,3,opt,name=graphical_session,json=graphicalSession,proto3,oneof" json:"graphical_session,omitempty"`
}

func (x *LoginWindowSessionLock) Reset() {
	*x = LoginWindowSessionLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWindowSessionLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWindowSessionLock) ProtoMessage() {}

func (x *LoginWindowSessionLock) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWindowSessionLock.ProtoReflect.Descriptor instead.
func (*LoginWindowSessionLock) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{33}
}

func (x *LoginWindowSessionLock) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *LoginWindowSessionLock) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginWindowSessionLock) GetGraphicalSession() *GraphicalSession {
	if x != nil {
		return x.GraphicalSession
	}
	return nil
}

type LoginWindowSessionUnlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator       *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	User             *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
	GraphicalSession *GraphicalSession `protobuf:"bytes,3,opt,name=graphical_session,json=graphicalSession,proto3,oneof" json:"graphical_session,omitempty"`
}

func (x *LoginWindowSessionUnlock) Reset() {
	*x = LoginWindowSessionUnlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWindowSessionUnlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWindowSessionUnlock) ProtoMessage() {}

func (x *LoginWindowSessionUnlock) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWindowSessionUnlock.ProtoReflect.Descriptor instead.
func (*LoginWindowSessionUnlock) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{34}
}

func (x *LoginWindowSessionUnlock) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *LoginWindowSessionUnlock) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginWindowSessionUnlock) GetGraphicalSession() *GraphicalSession {
	if x != nil {
		return x.GraphicalSession
	}
	return nil
}

type LoginWindowSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*LoginWindowSession_Login
	//	*LoginWindowSession_Logout
	//	*LoginWindowSession_Lock
	//	*LoginWindowSession_Unlock
	Event isLoginWindowSession_Event `protobuf_oneof:"event"`
}

func (x *LoginWindowSession) Reset() {
	*x = LoginWindowSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWindowSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWindowSession) ProtoMessage() {}

func (x *LoginWindowSession) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWindowSession.ProtoReflect.Descriptor instead.
func (*LoginWindowSession) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{35}
}

func (m *LoginWindowSession) GetEvent() isLoginWindowSession_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *LoginWindowSession) GetLogin() *LoginWindowSessionLogin {
	if x, ok := x.GetEvent().(*LoginWindowSession_Login); ok {
		return x.Login
	}
	return nil
}

func (x *LoginWindowSession) GetLogout() *LoginWindowSessionLogout {
	if x, ok := x.GetEvent().(*LoginWindowSession_Logout); ok {
		return x.Logout
	}
	return nil
}

func (x *LoginWindowSession) GetLock() *LoginWindowSessionLock {
	if x, ok := x.GetEvent().(*LoginWindowSession_Lock); ok {
		return x.Lock
	}
	return nil
}

func (x *LoginWindowSession) GetUnlock() *LoginWindowSessionUnlock {
	if x, ok := x.GetEvent().(*LoginWindowSession_Unlock); ok {
		return x.Unlock
	}
	return nil
}

type isLoginWindowSession_Event interface {
	isLoginWindowSession_Event()
}

type LoginWindowSession_Login struct {
	Login *LoginWindowSessionLogin `protobuf:"bytes,1,opt,name=login,proto3,oneof"`
}

type LoginWindowSession_Logout struct {
	Logout *LoginWindowSessionLogout `protobuf:"bytes,2,opt,name=logout,proto3,oneof"`
}

type LoginWindowSession_Lock struct {
	Lock *LoginWindowSessionLock `protobuf:"bytes,3,opt,name=lock,proto3,oneof"`
}

type LoginWindowSession_Unlock struct {
	Unlock *LoginWindowSessionUnlock `protobuf:"bytes,4,opt,name=unlock,proto3,oneof"`
}

func (*LoginWindowSession_Login) isLoginWindowSession_Event() {}

func (*LoginWindowSession_Logout) isLoginWindowSession_Event() {}

func (*LoginWindowSession_Lock) isLoginWindowSession_Event() {}

func (*LoginWindowSession_Unlock) isLoginWindowSession_Event() {}

type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator     *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Success        *bool             `protobuf:"varint,2,opt,name=success,proto3,oneof" json:"success,omitempty"`
	FailureMessage []byte            `protobuf:"bytes,3,opt,name=failure_message,json=failureMessage,proto3,oneof" json:"failure_message,omitempty"`
	User           *UserInfo         `protobuf:"bytes,4,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{36}
}

func (x *Login) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Login) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Login) GetFailureMessage() []byte {
	if x != nil {
		return x.FailureMessage
	}
	return nil
}

func (x *Login) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type Logout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	User       *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *Logout) Reset() {
	*x = Logout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logout) ProtoMessage() {}

func (x *Logout) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logout.ProtoReflect.Descriptor instead.
func (*Logout) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{37}
}

func (x *Logout) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *Logout) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type LoginLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*LoginLogout_Login
	//	*LoginLogout_Logout
	Event isLoginLogout_Event `protobuf_oneof:"event"`
}

func (x *LoginLogout) Reset() {
	*x = LoginLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLogout) ProtoMessage() {}

func (x *LoginLogout) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLogout.ProtoReflect.Descriptor instead.
func (*LoginLogout) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{38}
}

func (m *LoginLogout) GetEvent() isLoginLogout_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *LoginLogout) GetLogin() *Login {
	if x, ok := x.GetEvent().(*LoginLogout_Login); ok {
		return x.Login
	}
	return nil
}

func (x *LoginLogout) GetLogout() *Logout {
	if x, ok := x.GetEvent().(*LoginLogout_Logout); ok {
		return x.Logout
	}
	return nil
}

type isLoginLogout_Event interface {
	isLoginLogout_Event()
}

type LoginLogout_Login struct {
	Login *Login `protobuf:"bytes,1,opt,name=login,proto3,oneof"`
}

type LoginLogout_Logout struct {
	Logout *Logout `protobuf:"bytes,2,opt,name=logout,proto3,oneof"`
}

func (*LoginLogout_Login) isLoginLogout_Event() {}

func (*LoginLogout_Logout) isLoginLogout_Event() {}

type ScreenSharingAttach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator         *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Success            *bool             `protobuf:"varint,2,opt,name=success,proto3,oneof" json:"success,omitempty"`
	Source             *SocketAddress    `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Viewer             []byte            `protobuf:"bytes,4,opt,name=viewer,proto3,oneof" json:"viewer,omitempty"`
	AuthenticationType []byte            `protobuf:"bytes,5,opt,name=authentication_type,json=authenticationType,proto3,oneof" json:"authentication_type,omitempty"`
	AuthenticationUser *UserInfo         `protobuf:"bytes,6,opt,name=authentication_user,json=authenticationUser,proto3,oneof" json:"authentication_user,omitempty"`
	SessionUser        *UserInfo         `protobuf:"bytes,7,opt,name=session_user,json=sessionUser,proto3,oneof" json:"session_user,omitempty"`
	ExistingSession    *bool             `protobuf:"varint,8,opt,name=existing_session,json=existingSession,proto3,oneof" json:"existing_session,omitempty"`
	GraphicalSession   *GraphicalSession `protobuf:"bytes,9,opt,name=graphical_session,json=graphicalSession,proto3,oneof" json:"graphical_session,omitempty"`
}

func (x *ScreenSharingAttach) Reset() {
	*x = ScreenSharingAttach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenSharingAttach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenSharingAttach) ProtoMessage() {}

func (x *ScreenSharingAttach) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenSharingAttach.ProtoReflect.Descriptor instead.
func (*ScreenSharingAttach) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{39}
}

func (x *ScreenSharingAttach) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *ScreenSharingAttach) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ScreenSharingAttach) GetSource() *SocketAddress {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ScreenSharingAttach) GetViewer() []byte {
	if x != nil {
		return x.Viewer
	}
	return nil
}

func (x *ScreenSharingAttach) GetAuthenticationType() []byte {
	if x != nil {
		return x.AuthenticationType
	}
	return nil
}

func (x *ScreenSharingAttach) GetAuthenticationUser() *UserInfo {
	if x != nil {
		return x.AuthenticationUser
	}
	return nil
}

func (x *ScreenSharingAttach) GetSessionUser() *UserInfo {
	if x != nil {
		return x.SessionUser
	}
	return nil
}

func (x *ScreenSharingAttach) GetExistingSession() bool {
	if x != nil && x.ExistingSession != nil {
		return *x.ExistingSession
	}
	return false
}

func (x *ScreenSharingAttach) GetGraphicalSession() *GraphicalSession {
	if x != nil {
		return x.GraphicalSession
	}
	return nil
}

type ScreenSharingDetach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator       *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Source           *SocketAddress    `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Viewer           []byte            `protobuf:"bytes,3,opt,name=viewer,proto3,oneof" json:"viewer,omitempty"`
	GraphicalSession *GraphicalSession `protobuf:"bytes,4,opt,name=graphical_session,json=graphicalSession,proto3,oneof" json:"graphical_session,omitempty"`
}

func (x *ScreenSharingDetach) Reset() {
	*x = ScreenSharingDetach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenSharingDetach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenSharingDetach) ProtoMessage() {}

func (x *ScreenSharingDetach) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenSharingDetach.ProtoReflect.Descriptor instead.
func (*ScreenSharingDetach) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{40}
}

func (x *ScreenSharingDetach) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *ScreenSharingDetach) GetSource() *SocketAddress {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ScreenSharingDetach) GetViewer() []byte {
	if x != nil {
		return x.Viewer
	}
	return nil
}

func (x *ScreenSharingDetach) GetGraphicalSession() *GraphicalSession {
	if x != nil {
		return x.GraphicalSession
	}
	return nil
}

type ScreenSharing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*ScreenSharing_Attach
	//	*ScreenSharing_Detach
	Event isScreenSharing_Event `protobuf_oneof:"event"`
}

func (x *ScreenSharing) Reset() {
	*x = ScreenSharing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenSharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenSharing) ProtoMessage() {}

func (x *ScreenSharing) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenSharing.ProtoReflect.Descriptor instead.
func (*ScreenSharing) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{41}
}

func (m *ScreenSharing) GetEvent() isScreenSharing_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ScreenSharing) GetAttach() *ScreenSharingAttach {
	if x, ok := x.GetEvent().(*ScreenSharing_Attach); ok {
		return x.Attach
	}
	return nil
}

func (x *ScreenSharing) GetDetach() *ScreenSharingDetach {
	if x, ok := x.GetEvent().(*ScreenSharing_Detach); ok {
		return x.Detach
	}
	return nil
}

type isScreenSharing_Event interface {
	isScreenSharing_Event()
}

type ScreenSharing_Attach struct {
	Attach *ScreenSharingAttach `protobuf:"bytes,1,opt,name=attach,proto3,oneof"`
}

type ScreenSharing_Detach struct {
	Detach *ScreenSharingDetach `protobuf:"bytes,2,opt,name=detach,proto3,oneof"`
}

func (*ScreenSharing_Attach) isScreenSharing_Event() {}

func (*ScreenSharing_Detach) isScreenSharing_Event() {}

type OpenSSHLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight    `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Result     *OpenSSHLogin_Result `protobuf:"varint,2,opt,name=result,proto3,enum=santa.telemetry.v1.OpenSSHLogin_Result,oneof" json:"result,omitempty"`
	Source     *SocketAddress       `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	User       *UserInfo            `protobuf:"bytes,4,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *OpenSSHLogin) Reset() {
	*x = OpenSSHLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSSHLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSSHLogin) ProtoMessage() {}

func (x *OpenSSHLogin) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSSHLogin.ProtoReflect.Descriptor instead.
func (*OpenSSHLogin) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{42}
}

func (x *OpenSSHLogin) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *OpenSSHLogin) GetResult() OpenSSHLogin_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return OpenSSHLogin_RESULT_UNKNOWN
}

func (x *OpenSSHLogin) GetSource() *SocketAddress {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OpenSSHLogin) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type OpenSSHLogout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instigator *ProcessInfoLight `protobuf:"bytes,1,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	Source     *SocketAddress    `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	User       *UserInfo         `protobuf:"bytes,3,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *OpenSSHLogout) Reset() {
	*x = OpenSSHLogout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSSHLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSSHLogout) ProtoMessage() {}

func (x *OpenSSHLogout) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSSHLogout.ProtoReflect.Descriptor instead.
func (*OpenSSHLogout) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{43}
}

func (x *OpenSSHLogout) GetInstigator() *ProcessInfoLight {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *OpenSSHLogout) GetSource() *SocketAddress {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OpenSSHLogout) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type OpenSSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*OpenSSH_Login
	//	*OpenSSH_Logout
	Event isOpenSSH_Event `protobuf_oneof:"event"`
}

func (x *OpenSSH) Reset() {
	*x = OpenSSH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSSH) ProtoMessage() {}

func (x *OpenSSH) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSSH.ProtoReflect.Descriptor instead.
func (*OpenSSH) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{44}
}

func (m *OpenSSH) GetEvent() isOpenSSH_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *OpenSSH) GetLogin() *OpenSSHLogin {
	if x, ok := x.GetEvent().(*OpenSSH_Login); ok {
		return x.Login
	}
	return nil
}

func (x *OpenSSH) GetLogout() *OpenSSHLogout {
	if x, ok := x.GetEvent().(*OpenSSH_Logout); ok {
		return x.Logout
	}
	return nil
}

type isOpenSSH_Event interface {
	isOpenSSH_Event()
}

type OpenSSH_Login struct {
	Login *OpenSSHLogin `protobuf:"bytes,1,opt,name=login,proto3,oneof"`
}

type OpenSSH_Logout struct {
	Logout *OpenSSHLogout `protobuf:"bytes,2,opt,name=logout,proto3,oneof"`
}

func (*OpenSSH_Login) isOpenSSH_Event() {}

func (*OpenSSH_Logout) isOpenSSH_Event() {}

type SantaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineId     *string                `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3,oneof" json:"machine_id,omitempty"`
	EventTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3,oneof" json:"event_time,omitempty"`
	ProcessedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=processed_time,json=processedTime,proto3,oneof" json:"processed_time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*SantaMessage_Execution
	//	*SantaMessage_Fork
	//	*SantaMessage_Exit
	//	*SantaMessage_Close
	//	*SantaMessage_Rename
	//	*SantaMessage_Unlink
	//	*SantaMessage_Link
	//	*SantaMessage_Exchangedata
	//	*SantaMessage_Disk
	//	*SantaMessage_Bundle
	//	*SantaMessage_Allowlist
	//	*SantaMessage_FileAccess
	//	*SantaMessage_CodesigningInvalidated
	//	*SantaMessage_LoginWindowSession
	//	*SantaMessage_LoginLogout
	//	*SantaMessage_ScreenSharing
	//	*SantaMessage_OpenSsh
	Event isSantaMessage_Event `protobuf_oneof:"event"`
}

func (x *SantaMessage) Reset() {
	*x = SantaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SantaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SantaMessage) ProtoMessage() {}

func (x *SantaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SantaMessage.ProtoReflect.Descriptor instead.
func (*SantaMessage) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{45}
}

func (x *SantaMessage) GetMachineId() string {
	if x != nil && x.MachineId != nil {
		return *x.MachineId
	}
	return ""
}

func (x *SantaMessage) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *SantaMessage) GetProcessedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedTime
	}
	return nil
}

func (m *SantaMessage) GetEvent() isSantaMessage_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SantaMessage) GetExecution() *Execution {
	if x, ok := x.GetEvent().(*SantaMessage_Execution); ok {
		return x.Execution
	}
	return nil
}

func (x *SantaMessage) GetFork() *Fork {
	if x, ok := x.GetEvent().(*SantaMessage_Fork); ok {
		return x.Fork
	}
	return nil
}

func (x *SantaMessage) GetExit() *Exit {
	if x, ok := x.GetEvent().(*SantaMessage_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *SantaMessage) GetClose() *Close {
	if x, ok := x.GetEvent().(*SantaMessage_Close); ok {
		return x.Close
	}
	return nil
}

func (x *SantaMessage) GetRename() *Rename {
	if x, ok := x.GetEvent().(*SantaMessage_Rename); ok {
		return x.Rename
	}
	return nil
}

func (x *SantaMessage) GetUnlink() *Unlink {
	if x, ok := x.GetEvent().(*SantaMessage_Unlink); ok {
		return x.Unlink
	}
	return nil
}

func (x *SantaMessage) GetLink() *Link {
	if x, ok := x.GetEvent().(*SantaMessage_Link); ok {
		return x.Link
	}
	return nil
}

func (x *SantaMessage) GetExchangedata() *Exchangedata {
	if x, ok := x.GetEvent().(*SantaMessage_Exchangedata); ok {
		return x.Exchangedata
	}
	return nil
}

func (x *SantaMessage) GetDisk() *Disk {
	if x, ok := x.GetEvent().(*SantaMessage_Disk); ok {
		return x.Disk
	}
	return nil
}

func (x *SantaMessage) GetBundle() *Bundle {
	if x, ok := x.GetEvent().(*SantaMessage_Bundle); ok {
		return x.Bundle
	}
	return nil
}

func (x *SantaMessage) GetAllowlist() *Allowlist {
	if x, ok := x.GetEvent().(*SantaMessage_Allowlist); ok {
		return x.Allowlist
	}
	return nil
}

func (x *SantaMessage) GetFileAccess() *FileAccess {
	if x, ok := x.GetEvent().(*SantaMessage_FileAccess); ok {
		return x.FileAccess
	}
	return nil
}

func (x *SantaMessage) GetCodesigningInvalidated() *CodesigningInvalidated {
	if x, ok := x.GetEvent().(*SantaMessage_CodesigningInvalidated); ok {
		return x.CodesigningInvalidated
	}
	return nil
}

func (x *SantaMessage) GetLoginWindowSession() *LoginWindowSession {
	if x, ok := x.GetEvent().(*SantaMessage_LoginWindowSession); ok {
		return x.LoginWindowSession
	}
	return nil
}

func (x *SantaMessage) GetLoginLogout() *LoginLogout {
	if x, ok := x.GetEvent().(*SantaMessage_LoginLogout); ok {
		return x.LoginLogout
	}
	return nil
}

func (x *SantaMessage) GetScreenSharing() *ScreenSharing {
	if x, ok := x.GetEvent().(*SantaMessage_ScreenSharing); ok {
		return x.ScreenSharing
	}
	return nil
}

func (x *SantaMessage) GetOpenSsh() *OpenSSH {
	if x, ok := x.GetEvent().(*SantaMessage_OpenSsh); ok {
		return x.OpenSsh
	}
	return nil
}

type isSantaMessage_Event interface {
	isSantaMessage_Event()
}

type SantaMessage_Execution struct {
	Execution *Execution `protobuf:"bytes,10,opt,name=execution,proto3,oneof"`
}

type SantaMessage_Fork struct {
	Fork *Fork `protobuf:"bytes,11,opt,name=fork,proto3,oneof"`
}

type SantaMessage_Exit struct {
	Exit *Exit `protobuf:"bytes,12,opt,name=exit,proto3,oneof"`
}

type SantaMessage_Close struct {
	Close *Close `protobuf:"bytes,13,opt,name=close,proto3,oneof"`
}

type SantaMessage_Rename struct {
	Rename *Rename `protobuf:"bytes,14,opt,name=rename,proto3,oneof"`
}

type SantaMessage_Unlink struct {
	Unlink *Unlink `protobuf:"bytes,15,opt,name=unlink,proto3,oneof"`
}

type SantaMessage_Link struct {
	Link *Link `protobuf:"bytes,16,opt,name=link,proto3,oneof"`
}

type SantaMessage_Exchangedata struct {
	Exchangedata *Exchangedata `protobuf:"bytes,17,opt,name=exchangedata,proto3,oneof"`
}

type SantaMessage_Disk struct {
	Disk *Disk `protobuf:"bytes,18,opt,name=disk,proto3,oneof"`
}

type SantaMessage_Bundle struct {
	Bundle *Bundle `protobuf:"bytes,19,opt,name=bundle,proto3,oneof"`
}

type SantaMessage_Allowlist struct {
	Allowlist *Allowlist `protobuf:"bytes,20,opt,name=allowlist,proto3,oneof"`
}

type SantaMessage_FileAccess struct {
	FileAccess *FileAccess `protobuf:"bytes,21,opt,name=file_access,json=fileAccess,proto3,oneof"`
}

type SantaMessage_CodesigningInvalidated struct {
	CodesigningInvalidated *CodesigningInvalidated `protobuf:"bytes,22,opt,name=codesigning_invalidated,json=codesigningInvalidated,proto3,oneof"`
}

type SantaMessage_LoginWindowSession struct {
	LoginWindowSession *LoginWindowSession `protobuf:"bytes,23,opt,name=login_window_session,json=loginWindowSession,proto3,oneof"`
}

type SantaMessage_LoginLogout struct {
	LoginLogout *LoginLogout `protobuf:"bytes,24,opt,name=login_logout,json=loginLogout,proto3,oneof"`
}

type SantaMessage_ScreenSharing struct {
	ScreenSharing *ScreenSharing `protobuf:"bytes,25,opt,name=screen_sharing,json=screenSharing,proto3,oneof"`
}

type SantaMessage_OpenSsh struct {
	OpenSsh *OpenSSH `protobuf:"bytes,26,opt,name=open_ssh,json=openSsh,proto3,oneof"`
}

func (*SantaMessage_Execution) isSantaMessage_Event() {}

func (*SantaMessage_Fork) isSantaMessage_Event() {}

func (*SantaMessage_Exit) isSantaMessage_Event() {}

func (*SantaMessage_Close) isSantaMessage_Event() {}

func (*SantaMessage_Rename) isSantaMessage_Event() {}

func (*SantaMessage_Unlink) isSantaMessage_Event() {}

func (*SantaMessage_Link) isSantaMessage_Event() {}

func (*SantaMessage_Exchangedata) isSantaMessage_Event() {}

func (*SantaMessage_Disk) isSantaMessage_Event() {}

func (*SantaMessage_Bundle) isSantaMessage_Event() {}

func (*SantaMessage_Allowlist) isSantaMessage_Event() {}

func (*SantaMessage_FileAccess) isSantaMessage_Event() {}

func (*SantaMessage_CodesigningInvalidated) isSantaMessage_Event() {}

func (*SantaMessage_LoginWindowSession) isSantaMessage_Event() {}

func (*SantaMessage_LoginLogout) isSantaMessage_Event() {}

func (*SantaMessage_ScreenSharing) isSantaMessage_Event() {}

func (*SantaMessage_OpenSsh) isSantaMessage_Event() {}

type SantaMessageBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*SantaMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *SantaMessageBatch) Reset() {
	*x = SantaMessageBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SantaMessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SantaMessageBatch) ProtoMessage() {}

func (x *SantaMessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SantaMessageBatch.ProtoReflect.Descriptor instead.
func (*SantaMessageBatch) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{46}
}

func (x *SantaMessageBatch) GetMessages() []*SantaMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type LogBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*anypb.Any `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *LogBatch) Reset() {
	*x = LogBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBatch) ProtoMessage() {}

func (x *LogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBatch.ProtoReflect.Descriptor instead.
func (*LogBatch) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{47}
}

func (x *LogBatch) GetRecords() []*anypb.Any {
	if x != nil {
		return x.Records
	}
	return nil
}

type Exit_Exited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitStatus *int32 `protobuf:"varint,1,opt,name=exit_status,json=exitStatus,proto3,oneof" json:"exit_status,omitempty"`
}

func (x *Exit_Exited) Reset() {
	*x = Exit_Exited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exit_Exited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exit_Exited) ProtoMessage() {}

func (x *Exit_Exited) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exit_Exited.ProtoReflect.Descriptor instead.
func (*Exit_Exited) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Exit_Exited) GetExitStatus() int32 {
	if x != nil && x.ExitStatus != nil {
		return *x.ExitStatus
	}
	return 0
}

type Exit_Signaled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signal *int32 `protobuf:"varint,1,opt,name=signal,proto3,oneof" json:"signal,omitempty"`
}

func (x *Exit_Signaled) Reset() {
	*x = Exit_Signaled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exit_Signaled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exit_Signaled) ProtoMessage() {}

func (x *Exit_Signaled) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exit_Signaled.ProtoReflect.Descriptor instead.
func (*Exit_Signaled) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Exit_Signaled) GetSignal() int32 {
	if x != nil && x.Signal != nil {
		return *x.Signal
	}
	return 0
}

var File_telemetry_v1_proto protoreflect.FileDescriptor

var file_telemetry_v1_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x67, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5e, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x69, 0x64, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x69, 0x64, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x69, 0x64, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x94, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x64, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x64, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x64, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x06, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x15, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x04, 0x72, 0x64, 0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x08, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0a, 0x52,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0e, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x67, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x03, 0x67, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x65, 0x76, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x69, 0x6e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72,
	0x64, 0x65, 0x76, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x65, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x6c, 0x67, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x22, 0x37, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x6c, 0x67, 0x6f, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xd5, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x48, 0x02, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x48, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x62, 0x0a, 0x0d, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xa4, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x66, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x44, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x06, 0x66, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x06, 0x70, 0x69, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x22, 0xf6,
	0x01, 0x0a, 0x06, 0x46, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x41, 0x4c, 0x4b, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x53, 0x48, 0x4d, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x53, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x53,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x45, 0x58, 0x55, 0x53, 0x10, 0x0b, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x66, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x55, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x32, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xd7, 0x0a, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x07, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x73, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x07, 0x63, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x0e, 0x52, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x03, 0x74,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x0f, 0x52, 0x03, 0x74,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x10, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x11, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe1, 0x06, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x05, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x0e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x07, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0a, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x51, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x22, 0xf7, 0x0b, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x34, 0x0a, 0x03, 0x66, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x66, 0x64, 0x73,
	0x12, 0x2f, 0x0a, 0x11, 0x66, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0f, 0x66,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x48, 0x06, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x07, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x08, 0x52, 0x0f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x0c, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x22, 0x47, 0x0a, 0x08, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x59,
	0x10, 0x02, 0x22, 0x89, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x44, 0x48, 0x41, 0x53, 0x48, 0x10, 0x0c, 0x22, 0x3d,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x04, 0x46,
	0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x48, 0x01, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x9b, 0x03, 0x0a, 0x04, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06,
	0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x32, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x45,
	0x78, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xee, 0x01, 0x0a,
	0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x22, 0x8f, 0x02,
	0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22,
	0xa8, 0x01, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x16, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xce,
	0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0xcc, 0x04, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x62, 0x73, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x62, 0x73, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x66, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x62,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x03, 0x62, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x64, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x64, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x22, 0x49, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x73, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x66, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x62, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xe0,
	0x02, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xab, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x9a, 0x07, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x44,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x05, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50,
	0x59, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x09, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x10,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a,
	0x0d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x5c,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x04, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xa1, 0x02, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x49, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x56, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x02, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x02, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x02,
	0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x11,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52,
	0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb4, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x06, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x7f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xd1, 0x05, 0x0a, 0x13, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x03, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x05, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x56, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x08, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x02, 0x0a, 0x13, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x42,
	0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x05, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x53, 0x48, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53,
	0x48, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x22, 0xbd, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x54, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4b, 0x42, 0x44, 0x49, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x47, 0x53, 0x53, 0x41, 0x50, 0x49, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x0a, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22,
	0xf4, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x48, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e,
	0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x53, 0x48, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x48, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x06,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x48, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0xa1, 0x0a, 0x0a, 0x0c, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x2e,
	0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61,
	0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x46, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a,
	0x17, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53,
	0x48, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x61, 0x6e, 0x74, 0x61, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x6e, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x08, 0xa2, 0x02, 0x05, 0x53, 0x4e, 0x54, 0x50, 0x42, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetry_v1_proto_rawDescOnce sync.Once
	file_telemetry_v1_proto_rawDescData = file_telemetry_v1_proto_rawDesc
)

func file_telemetry_v1_proto_rawDescGZIP() []byte {
	file_telemetry_v1_proto_rawDescOnce.Do(func() {
		file_telemetry_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_v1_proto_rawDescData)
	})
	return file_telemetry_v1_proto_rawDescData
}

var file_telemetry_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_telemetry_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_telemetry_v1_proto_goTypes = []interface{}{
	(Hash_HashAlgo)(0),                     // 0: santa.telemetry.v1.Hash.HashAlgo
	(FileDescriptor_FDType)(0),             // 1: santa.telemetry.v1.FileDescriptor.FDType
	(ProcessTreeAnnotations_Originator)(0), // 2: santa.telemetry.v1.ProcessTreeAnnotations.Originator
	(Execution_Decision)(0),                // 3: santa.telemetry.v1.Execution.Decision
	(Execution_Reason)(0),                  // 4: santa.telemetry.v1.Execution.Reason
	(Execution_Mode)(0),                    // 5: santa.telemetry.v1.Execution.Mode
	(Disk_Action)(0),                       // 6: santa.telemetry.v1.Disk.Action
	(FileAccess_AccessType)(0),             // 7: santa.telemetry.v1.FileAccess.AccessType
	(FileAccess_PolicyDecision)(0),         // 8: santa.telemetry.v1.FileAccess.PolicyDecision
	(SocketAddress_Type)(0),                // 9: santa.telemetry.v1.SocketAddress.Type
	(OpenSSHLogin_Result)(0),               // 10: santa.telemetry.v1.OpenSSHLogin.Result
	(*UserInfo)(nil),                       // 11: santa.telemetry.v1.UserInfo
	(*GroupInfo)(nil),                      // 12: santa.telemetry.v1.GroupInfo
	(*ProcessID)(nil),                      // 13: santa.telemetry.v1.ProcessID
	(*CodeSignature)(nil),                  // 14: santa.telemetry.v1.CodeSignature
	(*Stat)(nil),                           // 15: santa.telemetry.v1.Stat
	(*Hash)(nil),                           // 16: santa.telemetry.v1.Hash
	(*FileInfo)(nil),                       // 17: santa.telemetry.v1.FileInfo
	(*FileInfoLight)(nil),                  // 18: santa.telemetry.v1.FileInfoLight
	(*FileDescriptor)(nil),                 // 19: santa.telemetry.v1.FileDescriptor
	(*ProcessTreeAnnotations)(nil),         // 20: santa.telemetry.v1.ProcessTreeAnnotations
	(*ProcessInfo)(nil),                    // 21: santa.telemetry.v1.ProcessInfo
	(*ProcessInfoLight)(nil),               // 22: santa.telemetry.v1.ProcessInfoLight
	(*CertificateInfo)(nil),                // 23: santa.telemetry.v1.CertificateInfo
	(*Entitlement)(nil),                    // 24: santa.telemetry.v1.Entitlement
	(*EntitlementInfo)(nil),                // 25: santa.telemetry.v1.EntitlementInfo
	(*Execution)(nil),                      // 26: santa.telemetry.v1.Execution
	(*Fork)(nil),                           // 27: santa.telemetry.v1.Fork
	(*Exit)(nil),                           // 28: santa.telemetry.v1.Exit
	(*Open)(nil),                           // 29: santa.telemetry.v1.Open
	(*Close)(nil),                          // 30: santa.telemetry.v1.Close
	(*Exchangedata)(nil),                   // 31: santa.telemetry.v1.Exchangedata
	(*Rename)(nil),                         // 32: santa.telemetry.v1.Rename
	(*Unlink)(nil),                         // 33: santa.telemetry.v1.Unlink
	(*CodesigningInvalidated)(nil),         // 34: santa.telemetry.v1.CodesigningInvalidated
	(*Link)(nil),                           // 35: santa.telemetry.v1.Link
	(*Disk)(nil),                           // 36: santa.telemetry.v1.Disk
	(*Bundle)(nil),                         // 37: santa.telemetry.v1.Bundle
	(*Allowlist)(nil),                      // 38: santa.telemetry.v1.Allowlist
	(*FileAccess)(nil),                     // 39: santa.telemetry.v1.FileAccess
	(*GraphicalSession)(nil),               // 40: santa.telemetry.v1.GraphicalSession
	(*SocketAddress)(nil),                  // 41: santa.telemetry.v1.SocketAddress
	(*LoginWindowSessionLogin)(nil),        // 42: santa.telemetry.v1.LoginWindowSessionLogin
	(*LoginWindowSessionLogout)(nil),       // 43: santa.telemetry.v1.LoginWindowSessionLogout
	(*LoginWindowSessionLock)(nil),         // 44: santa.telemetry.v1.LoginWindowSessionLock
	(*LoginWindowSessionUnlock)(nil),       // 45: santa.telemetry.v1.LoginWindowSessionUnlock
	(*LoginWindowSession)(nil),             // 46: santa.telemetry.v1.LoginWindowSession
	(*Login)(nil),                          // 47: santa.telemetry.v1.Login
	(*Logout)(nil),                         // 48: santa.telemetry.v1.Logout
	(*LoginLogout)(nil),                    // 49: santa.telemetry.v1.LoginLogout
	(*ScreenSharingAttach)(nil),            // 50: santa.telemetry.v1.ScreenSharingAttach
	(*ScreenSharingDetach)(nil),            // 51: santa.telemetry.v1.ScreenSharingDetach
	(*ScreenSharing)(nil),                  // 52: santa.telemetry.v1.ScreenSharing
	(*OpenSSHLogin)(nil),                   // 53: santa.telemetry.v1.OpenSSHLogin
	(*OpenSSHLogout)(nil),                  // 54: santa.telemetry.v1.OpenSSHLogout
	(*OpenSSH)(nil),                        // 55: santa.telemetry.v1.OpenSSH
	(*SantaMessage)(nil),                   // 56: santa.telemetry.v1.SantaMessage
	(*SantaMessageBatch)(nil),              // 57: santa.telemetry.v1.SantaMessageBatch
	(*LogBatch)(nil),                       // 58: santa.telemetry.v1.LogBatch
	(*Exit_Exited)(nil),                    // 59: santa.telemetry.v1.Exit.Exited
	(*Exit_Signaled)(nil),                  // 60: santa.telemetry.v1.Exit.Signaled
	(*timestamppb.Timestamp)(nil),          // 61: google.protobuf.Timestamp
	(*anypb.Any)(nil),                      // 62: google.protobuf.Any
}
var file_telemetry_v1_proto_depIdxs = []int32{
	11,  // 0: santa.telemetry.v1.Stat.user:type_name -> santa.telemetry.v1.UserInfo
	12,  // 1: santa.telemetry.v1.Stat.group:type_name -> santa.telemetry.v1.GroupInfo
	61,  // 2: santa.telemetry.v1.Stat.access_time:type_name -> google.protobuf.Timestamp
	61,  // 3: santa.telemetry.v1.Stat.modification_time:type_name -> google.protobuf.Timestamp
	61,  // 4: santa.telemetry.v1.Stat.change_time:type_name -> google.protobuf.Timestamp
	61,  // 5: santa.telemetry.v1.Stat.birth_time:type_name -> google.protobuf.Timestamp
	0,   // 6: santa.telemetry.v1.Hash.type:type_name -> santa.telemetry.v1.Hash.HashAlgo
	15,  // 7: santa.telemetry.v1.FileInfo.stat:type_name -> santa.telemetry.v1.Stat
	16,  // 8: santa.telemetry.v1.FileInfo.hash:type_name -> santa.telemetry.v1.Hash
	1,   // 9: santa.telemetry.v1.FileDescriptor.fd_type:type_name -> santa.telemetry.v1.FileDescriptor.FDType
	2,   // 10: santa.telemetry.v1.ProcessTreeAnnotations.originator:type_name -> santa.telemetry.v1.ProcessTreeAnnotations.Originator
	13,  // 11: santa.telemetry.v1.ProcessInfo.id:type_name -> santa.telemetry.v1.ProcessID
	13,  // 12: santa.telemetry.v1.ProcessInfo.parent_id:type_name -> santa.telemetry.v1.ProcessID
	13,  // 13: santa.telemetry.v1.ProcessInfo.responsible_id:type_name -> santa.telemetry.v1.ProcessID
	11,  // 14: santa.telemetry.v1.ProcessInfo.effective_user:type_name -> santa.telemetry.v1.UserInfo
	12,  // 15: santa.telemetry.v1.ProcessInfo.effective_group:type_name -> santa.telemetry.v1.GroupInfo
	11,  // 16: santa.telemetry.v1.ProcessInfo.real_user:type_name -> santa.telemetry.v1.UserInfo
	12,  // 17: santa.telemetry.v1.ProcessInfo.real_group:type_name -> santa.telemetry.v1.GroupInfo
	14,  // 18: santa.telemetry.v1.ProcessInfo.code_signature:type_name -> santa.telemetry.v1.CodeSignature
	17,  // 19: santa.telemetry.v1.ProcessInfo.executable:type_name -> santa.telemetry.v1.FileInfo
	18,  // 20: santa.telemetry.v1.ProcessInfo.tty:type_name -> santa.telemetry.v1.FileInfoLight
	61,  // 21: santa.telemetry.v1.ProcessInfo.start_time:type_name -> google.protobuf.Timestamp
	20,  // 22: santa.telemetry.v1.ProcessInfo.annotations:type_name -> santa.telemetry.v1.ProcessTreeAnnotations
	13,  // 23: santa.telemetry.v1.ProcessInfoLight.id:type_name -> santa.telemetry.v1.ProcessID
	13,  // 24: santa.telemetry.v1.ProcessInfoLight.parent_id:type_name -> santa.telemetry.v1.ProcessID
	11,  // 25: santa.telemetry.v1.ProcessInfoLight.effective_user:type_name -> santa.telemetry.v1.UserInfo
	12,  // 26: santa.telemetry.v1.ProcessInfoLight.effective_group:type_name -> santa.telemetry.v1.GroupInfo
	11,  // 27: santa.telemetry.v1.ProcessInfoLight.real_user:type_name -> santa.telemetry.v1.UserInfo
	12,  // 28: santa.telemetry.v1.ProcessInfoLight.real_group:type_name -> santa.telemetry.v1.GroupInfo
	18,  // 29: santa.telemetry.v1.ProcessInfoLight.executable:type_name -> santa.telemetry.v1.FileInfoLight
	20,  // 30: santa.telemetry.v1.ProcessInfoLight.annotations:type_name -> santa.telemetry.v1.ProcessTreeAnnotations
	16,  // 31: santa.telemetry.v1.CertificateInfo.hash:type_name -> santa.telemetry.v1.Hash
	24,  // 32: santa.telemetry.v1.EntitlementInfo.entitlements:type_name -> santa.telemetry.v1.Entitlement
	22,  // 33: santa.telemetry.v1.Execution.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	21,  // 34: santa.telemetry.v1.Execution.target:type_name -> santa.telemetry.v1.ProcessInfo
	17,  // 35: santa.telemetry.v1.Execution.script:type_name -> santa.telemetry.v1.FileInfo
	17,  // 36: santa.telemetry.v1.Execution.working_directory:type_name -> santa.telemetry.v1.FileInfo
	19,  // 37: santa.telemetry.v1.Execution.fds:type_name -> santa.telemetry.v1.FileDescriptor
	3,   // 38: santa.telemetry.v1.Execution.decision:type_name -> santa.telemetry.v1.Execution.Decision
	4,   // 39: santa.telemetry.v1.Execution.reason:type_name -> santa.telemetry.v1.Execution.Reason
	5,   // 40: santa.telemetry.v1.Execution.mode:type_name -> santa.telemetry.v1.Execution.Mode
	23,  // 41: santa.telemetry.v1.Execution.certificate_info:type_name -> santa.telemetry.v1.CertificateInfo
	25,  // 42: santa.telemetry.v1.Execution.entitlement_info:type_name -> santa.telemetry.v1.EntitlementInfo
	22,  // 43: santa.telemetry.v1.Fork.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	22,  // 44: santa.telemetry.v1.Fork.child:type_name -> santa.telemetry.v1.ProcessInfoLight
	22,  // 45: santa.telemetry.v1.Exit.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	59,  // 46: santa.telemetry.v1.Exit.exited:type_name -> santa.telemetry.v1.Exit.Exited
	60,  // 47: santa.telemetry.v1.Exit.signaled:type_name -> santa.telemetry.v1.Exit.Signaled
	60,  // 48: santa.telemetry.v1.Exit.stopped:type_name -> santa.telemetry.v1.Exit.Signaled
	22,  // 49: santa.telemetry.v1.Open.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 50: santa.telemetry.v1.Open.target:type_name -> santa.telemetry.v1.FileInfo
	22,  // 51: santa.telemetry.v1.Close.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 52: santa.telemetry.v1.Close.target:type_name -> santa.telemetry.v1.FileInfo
	22,  // 53: santa.telemetry.v1.Exchangedata.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 54: santa.telemetry.v1.Exchangedata.file1:type_name -> santa.telemetry.v1.FileInfo
	17,  // 55: santa.telemetry.v1.Exchangedata.file2:type_name -> santa.telemetry.v1.FileInfo
	22,  // 56: santa.telemetry.v1.Rename.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 57: santa.telemetry.v1.Rename.source:type_name -> santa.telemetry.v1.FileInfo
	22,  // 58: santa.telemetry.v1.Unlink.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 59: santa.telemetry.v1.Unlink.target:type_name -> santa.telemetry.v1.FileInfo
	22,  // 60: santa.telemetry.v1.CodesigningInvalidated.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	22,  // 61: santa.telemetry.v1.Link.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 62: santa.telemetry.v1.Link.source:type_name -> santa.telemetry.v1.FileInfo
	6,   // 63: santa.telemetry.v1.Disk.action:type_name -> santa.telemetry.v1.Disk.Action
	61,  // 64: santa.telemetry.v1.Disk.appearance:type_name -> google.protobuf.Timestamp
	16,  // 65: santa.telemetry.v1.Bundle.file_hash:type_name -> santa.telemetry.v1.Hash
	16,  // 66: santa.telemetry.v1.Bundle.bundle_hash:type_name -> santa.telemetry.v1.Hash
	22,  // 67: santa.telemetry.v1.Allowlist.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	17,  // 68: santa.telemetry.v1.Allowlist.target:type_name -> santa.telemetry.v1.FileInfo
	21,  // 69: santa.telemetry.v1.FileAccess.instigator:type_name -> santa.telemetry.v1.ProcessInfo
	18,  // 70: santa.telemetry.v1.FileAccess.target:type_name -> santa.telemetry.v1.FileInfoLight
	7,   // 71: santa.telemetry.v1.FileAccess.access_type:type_name -> santa.telemetry.v1.FileAccess.AccessType
	8,   // 72: santa.telemetry.v1.FileAccess.policy_decision:type_name -> santa.telemetry.v1.FileAccess.PolicyDecision
	9,   // 73: santa.telemetry.v1.SocketAddress.type:type_name -> santa.telemetry.v1.SocketAddress.Type
	22,  // 74: santa.telemetry.v1.LoginWindowSessionLogin.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	11,  // 75: santa.telemetry.v1.LoginWindowSessionLogin.user:type_name -> santa.telemetry.v1.UserInfo
	40,  // 76: santa.telemetry.v1.LoginWindowSessionLogin.graphical_session:type_name -> santa.telemetry.v1.GraphicalSession
	22,  // 77: santa.telemetry.v1.LoginWindowSessionLogout.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	11,  // 78: santa.telemetry.v1.LoginWindowSessionLogout.user:type_name -> santa.telemetry.v1.UserInfo
	40,  // 79: santa.telemetry.v1.LoginWindowSessionLogout.graphical_session:type_name -> santa.telemetry.v1.GraphicalSession
	22,  // 80: santa.telemetry.v1.LoginWindowSessionLock.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	11,  // 81: santa.telemetry.v1.LoginWindowSessionLock.user:type_name -> santa.telemetry.v1.UserInfo
	40,  // 82: santa.telemetry.v1.LoginWindowSessionLock.graphical_session:type_name -> santa.telemetry.v1.GraphicalSession
	22,  // 83: santa.telemetry.v1.LoginWindowSessionUnlock.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	11,  // 84: santa.telemetry.v1.LoginWindowSessionUnlock.user:type_name -> santa.telemetry.v1.UserInfo
	40,  // 85: santa.telemetry.v1.LoginWindowSessionUnlock.graphical_session:type_name -> santa.telemetry.v1.GraphicalSession
	42,  // 86: santa.telemetry.v1.LoginWindowSession.login:type_name -> santa.telemetry.v1.LoginWindowSessionLogin
	43,  // 87: santa.telemetry.v1.LoginWindowSession.logout:type_name -> santa.telemetry.v1.LoginWindowSessionLogout
	44,  // 88: santa.telemetry.v1.LoginWindowSession.lock:type_name -> santa.telemetry.v1.LoginWindowSessionLock
	45,  // 89: santa.telemetry.v1.LoginWindowSession.unlock:type_name -> santa.telemetry.v1.LoginWindowSessionUnlock
	22,  // 90: santa.telemetry.v1.Login.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	11,  // 91: santa.telemetry.v1.Login.user:type_name -> santa.telemetry.v1.UserInfo
	22,  // 92: santa.telemetry.v1.Logout.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	11,  // 93: santa.telemetry.v1.Logout.user:type_name -> santa.telemetry.v1.UserInfo
	47,  // 94: santa.telemetry.v1.LoginLogout.login:type_name -> santa.telemetry.v1.Login
	48,  // 95: santa.telemetry.v1.LoginLogout.logout:type_name -> santa.telemetry.v1.Logout
	22,  // 96: santa.telemetry.v1.ScreenSharingAttach.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	41,  // 97: santa.telemetry.v1.ScreenSharingAttach.source:type_name -> santa.telemetry.v1.SocketAddress
	11,  // 98: santa.telemetry.v1.ScreenSharingAttach.authentication_user:type_name -> santa.telemetry.v1.UserInfo
	11,  // 99: santa.telemetry.v1.ScreenSharingAttach.session_user:type_name -> santa.telemetry.v1.UserInfo
	40,  // 100: santa.telemetry.v1.ScreenSharingAttach.graphical_session:type_name -> santa.telemetry.v1.GraphicalSession
	22,  // 101: santa.telemetry.v1.ScreenSharingDetach.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	41,  // 102: santa.telemetry.v1.ScreenSharingDetach.source:type_name -> santa.telemetry.v1.SocketAddress
	40,  // 103: santa.telemetry.v1.ScreenSharingDetach.graphical_session:type_name -> santa.telemetry.v1.GraphicalSession
	50,  // 104: santa.telemetry.v1.ScreenSharing.attach:type_name -> santa.telemetry.v1.ScreenSharingAttach
	51,  // 105: santa.telemetry.v1.ScreenSharing.detach:type_name -> santa.telemetry.v1.ScreenSharingDetach
	22,  // 106: santa.telemetry.v1.OpenSSHLogin.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	10,  // 107: santa.telemetry.v1.OpenSSHLogin.result:type_name -> santa.telemetry.v1.OpenSSHLogin.Result
	41,  // 108: santa.telemetry.v1.OpenSSHLogin.source:type_name -> santa.telemetry.v1.SocketAddress
	11,  // 109: santa.telemetry.v1.OpenSSHLogin.user:type_name -> santa.telemetry.v1.UserInfo
	22,  // 110: santa.telemetry.v1.OpenSSHLogout.instigator:type_name -> santa.telemetry.v1.ProcessInfoLight
	41,  // 111: santa.telemetry.v1.OpenSSHLogout.source:type_name -> santa.telemetry.v1.SocketAddress
	11,  // 112: santa.telemetry.v1.OpenSSHLogout.user:type_name -> santa.telemetry.v1.UserInfo
	53,  // 113: santa.telemetry.v1.OpenSSH.login:type_name -> santa.telemetry.v1.OpenSSHLogin
	54,  // 114: santa.telemetry.v1.OpenSSH.logout:type_name -> santa.telemetry.v1.OpenSSHLogout
	61,  // 115: santa.telemetry.v1.SantaMessage.event_time:type_name -> google.protobuf.Timestamp
	61,  // 116: santa.telemetry.v1.SantaMessage.processed_time:type_name -> google.protobuf.Timestamp
	26,  // 117: santa.telemetry.v1.SantaMessage.execution:type_name -> santa.telemetry.v1.Execution
	27,  // 118: santa.telemetry.v1.SantaMessage.fork:type_name -> santa.telemetry.v1.Fork
	28,  // 119: santa.telemetry.v1.SantaMessage.exit:type_name -> santa.telemetry.v1.Exit
	30,  // 120: santa.telemetry.v1.SantaMessage.close:type_name -> santa.telemetry.v1.Close
	32,  // 121: santa.telemetry.v1.SantaMessage.rename:type_name -> santa.telemetry.v1.Rename
	33,  // 122: santa.telemetry.v1.SantaMessage.unlink:type_name -> santa.telemetry.v1.Unlink
	35,  // 123: santa.telemetry.v1.SantaMessage.link:type_name -> santa.telemetry.v1.Link
	31,  // 124: santa.telemetry.v1.SantaMessage.exchangedata:type_name -> santa.telemetry.v1.Exchangedata
	36,  // 125: santa.telemetry.v1.SantaMessage.disk:type_name -> santa.telemetry.v1.Disk
	37,  // 126: santa.telemetry.v1.SantaMessage.bundle:type_name -> santa.telemetry.v1.Bundle
	38,  // 127: santa.telemetry.v1.SantaMessage.allowlist:type_name -> santa.telemetry.v1.Allowlist
	39,  // 128: santa.telemetry.v1.SantaMessage.file_access:type_name -> santa.telemetry.v1.FileAccess
	34,  // 129: santa.telemetry.v1.SantaMessage.codesigning_invalidated:type_name -> santa.telemetry.v1.CodesigningInvalidated
	46,  // 130: santa.telemetry.v1.SantaMessage.login_window_session:type_name -> santa.telemetry.v1.LoginWindowSession
	49,  // 131: santa.telemetry.v1.SantaMessage.login_logout:type_name -> santa.telemetry.v1.LoginLogout
	52,  // 132: santa.telemetry.v1.SantaMessage.screen_sharing:type_name -> santa.telemetry.v1.ScreenSharing
	55,  // 133: santa.telemetry.v1.SantaMessage.open_ssh:type_name -> santa.telemetry.v1.OpenSSH
	56,  // 134: santa.telemetry.v1.SantaMessageBatch.messages:type_name -> santa.telemetry.v1.SantaMessage
	62,  // 135: santa.telemetry.v1.LogBatch.records:type_name -> google.protobuf.Any
	136, // [136:136] is the sub-list for method output_type
	136, // [136:136] is the sub-list for method input_type
	136, // [136:136] is the sub-list for extension type_name
	136, // [136:136] is the sub-list for extension extendee
	0,   // [0:136] is the sub-list for field type_name
}

func init() { file_telemetry_v1_proto_init() }
func file_telemetry_v1_proto_init() {
	if File_telemetry_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTreeAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfoLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entitlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitlementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Close); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exchangedata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rename); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodesigningInvalidated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allowlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphicalSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWindowSessionLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWindowSessionLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWindowSessionLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWindowSessionUnlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWindowSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenSharingAttach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenSharingDetach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenSharing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSSHLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSSHLogout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SantaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SantaMessageBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exit_Exited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exit_Signaled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telemetry_v1_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Exit_Exited_)(nil),
		(*Exit_Signaled_)(nil),
		(*Exit_Stopped)(nil),
	}
	file_telemetry_v1_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*LoginWindowSession_Login)(nil),
		(*LoginWindowSession_Logout)(nil),
		(*LoginWindowSession_Lock)(nil),
		(*LoginWindowSession_Unlock)(nil),
	}
	file_telemetry_v1_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*LoginLogout_Login)(nil),
		(*LoginLogout_Logout)(nil),
	}
	file_telemetry_v1_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*ScreenSharing_Attach)(nil),
		(*ScreenSharing_Detach)(nil),
	}
	file_telemetry_v1_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*OpenSSH_Login)(nil),
		(*OpenSSH_Logout)(nil),
	}
	file_telemetry_v1_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*SantaMessage_Execution)(nil),
		(*SantaMessage_Fork)(nil),
		(*SantaMessage_Exit)(nil),
		(*SantaMessage_Close)(nil),
		(*SantaMessage_Rename)(nil),
		(*SantaMessage_Unlink)(nil),
		(*SantaMessage_Link)(nil),
		(*SantaMessage_Exchangedata)(nil),
		(*SantaMessage_Disk)(nil),
		(*SantaMessage_Bundle)(nil),
		(*SantaMessage_Allowlist)(nil),
		(*SantaMessage_FileAccess)(nil),
		(*SantaMessage_CodesigningInvalidated)(nil),
		(*SantaMessage_LoginWindowSession)(nil),
		(*SantaMessage_LoginLogout)(nil),
		(*SantaMessage_ScreenSharing)(nil),
		(*SantaMessage_OpenSsh)(nil),
	}
	file_telemetry_v1_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_telemetry_v1_proto_msgTypes[49].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_v1_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_v1_proto_goTypes,
		DependencyIndexes: file_telemetry_v1_proto_depIdxs,
		EnumInfos:         file_telemetry_v1_proto_enumTypes,
		MessageInfos:      file_telemetry_v1_proto_msgTypes,
	}.Build()
	File_telemetry_v1_proto = out.File
	file_telemetry_v1_proto_rawDesc = nil
	file_telemetry_v1_proto_goTypes = nil
	file_telemetry_v1_proto_depIdxs = nil
}
