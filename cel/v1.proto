syntax = "proto3";

package santa.cel.v1;

import "google/protobuf/timestamp.proto";

option go_package = "buf.build/gen/go/northpolesec/protos/protocolbuffers/go/cel";

// ReturnValue is the type that should be returned from the expression and
// indicates to Santa the decision that should be applied to the execution.
// These decisions map 1:1 with decisions from the santa.sync.v1.Policy enum
// but with fewer options.
//
// The expression can also return a boolean value, in which case true is
// equivalent to returning ALLOWLIST and false is equivalent to BLOCKLIST.
//
// Programs can return this enum either as integer values (e.g. 1 for ALLOWLIST)
// or by using the value names, as if they were keywords.
//
enum ReturnValue {
  // This value exists due to protobuf best practices but should not be returned
  // by any program and will be treated as an evaluation error if it is.
  UNSPECIFIED = 0;

  // Allow the process to execute.
  ALLOWLIST = 1;

  // Allow the process to execute and if the client has transitive allowlisting
  // enabled, any files created by this binary will be locally allowlisted.
  ALLOWLIST_COMPILER = 2;

  // Block the process from executing.
  BLOCKLIST = 3;

  // Block the process from executing and do not show GUI notifications to the
  // user. This should be used sparingly as the behavior of applications being
  // silently blocked can be very confusing for users.
  SILENT_BLOCKLIST = 4;
}

// The fields in this message provided to CEL programs.
message ExecutionContext {
  // The file being executed. All the fields in this message are based on the
  // content of the file, such that programs that only use fields in this
  // message can be cached.
  ExecutableFile target = 1;

  // The command-line arguments being passed to the new process.
  // Using this field will prevent the result from being cached.
  repeated string args = 2;

  // The environment variables being passed to the new process.
  // Using this field will prevent the result from being cached.
  map<string, string> envs = 3;
}

// The fields in this message are provided to the CEL program and are static,
// related only to the content of the executable file. The fields inside this
// message will always be the same as long as the content of the file doesn't
// change, which allows Santa to cache the results of CEL expressions that only
// use fields from this message.
message ExecutableFile {
  // The timestamp of when the binary was signed.
  //
  // This timestamp is provided by the developer when this binary was signed.
  // It is possible for developers to set this to whatever they wish when signing
  // unlike the secure_signing_timestamp.
  optional google.protobuf.Timestamp signing_time = 1;

  // The timestamp of when the binary was signed.
  //
  // This timestamp is the secure timestamp that was certified by Apple's timestamp
  // authority service and can be trusted.
  optional google.protobuf.Timestamp secure_signing_time = 2;
}
